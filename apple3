local Library = {
	Open = true;
	Accent = Color3.fromHex("6759b3");
	DarkerAccent = nil;
	FontColor = Color3.fromHex("ffffff");
	OutlineColor = Color3.fromHex("323232");	
	MainColor = Color3.fromHex("191925");
	BackgroundColor = Color3.fromHex("16161f");
	Pages = {};
	Sections = {};
	Flags = {};
	UnNamedFlags = 0;
	ThemeObjects = {};
	Instances = {};
	Holder = nil;
	PageHolder = nil;
	RegistryMap = {};
	Toggles = {};
	Keys = {
		[Enum.KeyCode.LeftShift] = "LShift",
		[Enum.KeyCode.RightShift] = "RShift",
		[Enum.KeyCode.LeftControl] = "LCtrl",
		[Enum.KeyCode.RightControl] = "RCtrl",
		[Enum.KeyCode.LeftAlt] = "LAlt",
		[Enum.KeyCode.RightAlt] = "RAlt",
		[Enum.KeyCode.CapsLock] = "Caps",
		[Enum.KeyCode.One] = "1",
		[Enum.KeyCode.Two] = "2",
		[Enum.KeyCode.Three] = "3",
		[Enum.KeyCode.Four] = "4",
		[Enum.KeyCode.Five] = "5",
		[Enum.KeyCode.Six] = "6",
		[Enum.KeyCode.Seven] = "7",
		[Enum.KeyCode.Eight] = "8",
		[Enum.KeyCode.Nine] = "9",
		[Enum.KeyCode.Zero] = "0",
		[Enum.KeyCode.KeypadOne] = "Num1",
		[Enum.KeyCode.KeypadTwo] = "Num2",
		[Enum.KeyCode.KeypadThree] = "Num3",
		[Enum.KeyCode.KeypadFour] = "Num4",
		[Enum.KeyCode.KeypadFive] = "Num5",
		[Enum.KeyCode.KeypadSix] = "Num6",
		[Enum.KeyCode.KeypadSeven] = "Num7",
		[Enum.KeyCode.KeypadEight] = "Num8",
		[Enum.KeyCode.KeypadNine] = "Num9",
		[Enum.KeyCode.KeypadZero] = "Num0",
		[Enum.KeyCode.Minus] = "-",
		[Enum.KeyCode.Equals] = "=",
		[Enum.KeyCode.Tilde] = "~",
		[Enum.KeyCode.LeftBracket] = "[",
		[Enum.KeyCode.RightBracket] = "]",
		[Enum.KeyCode.RightParenthesis] = ")",
		[Enum.KeyCode.LeftParenthesis] = "(",
		[Enum.KeyCode.Semicolon] = ",",
		[Enum.KeyCode.Quote] = "'",
		[Enum.KeyCode.BackSlash] = "\\",
		[Enum.KeyCode.Comma] = ",",
		[Enum.KeyCode.Period] = ".",
		[Enum.KeyCode.Slash] = "/",
		[Enum.KeyCode.Asterisk] = "*",
		[Enum.KeyCode.Plus] = "+",
		[Enum.KeyCode.Period] = ".",
		[Enum.KeyCode.Backquote] = "`",
		[Enum.UserInputType.MouseButton1] = "MB1",
		[Enum.UserInputType.MouseButton2] = "MB2",
		[Enum.UserInputType.MouseButton3] = "MB3"
	};
	Connections = {};
	Font = nil;
	FontSize = 12;
	Notifs = {};
	KeyList = nil;
	KeyshitList = nil;
	ScreenGUI = nil;
	Window = nil;
	Folder = "soulhub/"
}
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players");
local userinput = game:GetService("UserInputService");
local tweenserv = game:GetService("TweenService")
local runserv = game:GetService("RunService")
local httpserv = game:GetService("HttpService")
local Flags = {}; 
local LocalPlayer = Players.LocalPlayer;
local Mouse = LocalPlayer:GetMouse();
local Camera = Workspace:FindFirstChildOfClass("Camera");
local viewportSize = Camera.ViewportSize;
local ProtectGui = protectgui or (function()
end);
local NewVector2 = Vector2.new;
Library.__index = Library;
Library.Pages.__index = Library.Pages;
Library.Sections.__index = Library.Sections;

if not isfolder(Library.Folder) then
	makefolder(Library.Folder)
end
if not isfile(Library.Folder .. "hue.jpg") then
    writefile(Library.Folder .. "hue.jpg", game:HttpGet("https://raw.githubusercontent.com/minecraftuwfy2431/minecraft73852252exploder/main/hue.jpg?raw=true"))
end

if not isfile(Library.Folder .. "sat.jpg") then
    writefile(Library.Folder .. "sat.jpg", game:HttpGet("https://raw.githubusercontent.com/minecraftuwfy2431/minecraft73852252exploder/main/sat.jpg?raw=true"))
end

if not isfile(Library.Folder .. "val.jpg") then
    writefile(Library.Folder .. "val.jpg", game:HttpGet("https://raw.githubusercontent.com/minecraftuwfy2431/minecraft73852252exploder/main/val.jpg?raw=true"))
end

if not isfile(Library.Folder .. "cursor.jpg") then
    writefile(Library.Folder .. "cursor.jpg", game:HttpGet("https://raw.githubusercontent.com/minecraftuwfy2431/minecraft73852252exploder/main/cursor.jpg?raw=true"))
end

if not isfile(Library.Folder .. "highlight.jpg") then
    writefile(Library.Folder .. "highlight.jpg", game:HttpGet("https://raw.githubusercontent.com/minecraftuwfy2431/minecraft73852252exploder/main/highlight.jpg?raw=true"))
end

writefile(Library.Folder .. "ProggyClean.ttf", game:HttpGet("https://raw.githubusercontent.com/minecraftuwfy2431/minecraft73852252exploder/main/ProggyClean.ttf?raw=true"))

local Data = {
	name = "ProggyClean",
	faces = {
		{
			name = "Regular",
			weight = 200,
			style = "normal",
			assetId = getcustomasset(Library.Folder .. "ProggyClean.ttf"),
		},
	},
}
writefile(Library.Folder .. "ProggyClean.font", httpserv:JSONEncode(Data))

Library.Font = Font.new(getcustomasset(Library.Folder .. "ProggyClean.font"))
-- // Functions
function Library:GetDarkerColor(Color)
	local H, S, V = Color3.toHSV(Color)
	return Color3.fromHSV(H, S, V / 1.5)
end
Library.DarkerAccent = Library:GetDarkerColor(Library.Accent)
function Library:Create(Class, Properties, protectgui)
    local instance = Instance.new(Class)
    
    if protectgui then
        ProtectGui(instance)
    end
    
    local colorMapping = {
        FontColor = Library.FontColor,
        Accent = Library.Accent,
        DarkerAccent = Library.DarkerAccent,
        OutlineColor = Library.OutlineColor,
        MainColor = Library.MainColor,
        BackgroundColor = Library.BackgroundColor
    }
    
    local themeProperties = {}
    
    for Property, Value in pairs(Properties) do
        local resolvedValue = Value
        
        if typeof(Value) == "string" and colorMapping[Value] then
            resolvedValue = colorMapping[Value]
            themeProperties[Property] = Value
        end
        
        instance[Property] = resolvedValue
    end
    
    if next(themeProperties) then
        Library:AddToThemeObjects(instance, themeProperties)
    end
    
    return instance
end

function Library:Connection(Signal, Callback)
	local Con = Signal:Connect(Callback)
	table.insert(Library.Connections, Con)
	return Con
end

function Library:Unload()
	Library:SetOpen()
	task.wait(0.2)
	for i, _ in pairs(Flags) do
		local toggle = Library.Toggles[i]
		if toggle then
			toggle:Set(false)
		end
    end
	task.wait()
	self.ScreenGui:Destroy()
	task.wait()
	for _, v in ipairs(Library.Connections) do
		v:Disconnect()
	end
	self.Connections = {}
	task.wait()
	userinput.MouseIconEnabled = true
end
--
function Library:AddToThemeObjects(Instance, Properties)
    local Data = {
        Instance = Instance,
        Properties = Properties,
        Idx = #Library.ThemeObjects + 1
    }
    table.insert(Library.ThemeObjects, Data)
    Library.RegistryMap[Instance] = Data
end

function Library:RemoveFromThemeObjects(Instance)
	local Data = Library.RegistryMap[Instance];
	for Idx = #Library.ThemeObjects, 1, -1 do
		if Library.ThemeObjects[Idx] == Data then
			table.remove(Library.ThemeObjects, Idx);
		end;
	end;
	Library.RegistryMap[Instance] = nil;
end;
--
function Library:Notification(message, duration, color, position)
	if typeof(message) == "string" then
		local notification = {
			Container = nil,
			Objects = {}
		}
		local NotifContainer = Library:Create("Frame", {
			Parent = Library.ScreenGui,
			BackgroundColor3 = Color3.new(1, 1, 1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0),
			ZIndex = 99999999,
		})
		local Background = Library:Create("Frame", {
			Parent = NotifContainer,
			Size = UDim2.new(1, 0, 1, 0),
			BackgroundColor3 = Color3.new(0.0588, 0.0588, 0.0784),
			BorderColor3 = Color3.new(0.1373, 0.1373, 0.1569)
		})
		local Outline = Library:Create('Frame', {
			Parent = Background,
			Position = UDim2.new(0, -1, 0, -1),
			Size = UDim2.new(1, 2, 1, 2),
			BackgroundColor3 = Color3.new(1, 1, 1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0),
		})
		local UIStroke = Library:Create('UIStroke', {
			Parent = Outline
		})
		local TextLabel = Library:Create('TextLabel', {
			Parent = Background,
			Position = UDim2.new(0, 1, 0, 0),
			Size = UDim2.new(1, 0, 1, 0),
			BackgroundColor3 = Color3.new(1, 1, 1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0),
			Text = message,
			TextColor3 = Color3.new(0.9216, 0.9216, 0.9216),
			FontFace = Library.Font,
			TextSize = Library.FontSize,
			AutomaticSize = Enum.AutomaticSize.X,
			TextXAlignment = Enum.TextXAlignment.Left,
		})
		local Accemt = Library:Create('Frame', {
			Parent = Background,
			Size = UDim2.new(1, 0, 0, 2),
			BackgroundColor3 = "Accent",
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0),
		})
		local Progress = Library:Create('Frame', {
			Parent = Background,
			Position = UDim2.new(0, 0, 1, -1),
			Size = UDim2.new(0, 0, 0, 1),
			BackgroundColor3 = Color3.new(1, 0, 0),
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0),
		})
		--
		local Position = position == "Middle" and NewVector2(viewportSize.X / 2 - (TextLabel.TextBounds.X + 4) / 2, 600) or NewVector2(20, 20)
		--
		NotifContainer.Position = UDim2.new(0, Position.X, 0, Position.Y)
		NotifContainer.Size = UDim2.new(0, TextLabel.TextBounds.X + 4, 0, 20)
		notification.Container = NotifContainer
		table.insert(notification.Objects, Background)
		table.insert(notification.Objects, Outline)
		table.insert(notification.Objects, TextLabel)
		table.insert(notification.Objects, Accemt)
		table.insert(notification.Objects, Progress)
		if color ~= nil then
			Progress.BackgroundColor3 = color
			Accemt.BackgroundColor3 = color
		end
		task.spawn(function()
			Background.AnchorPoint = NewVector2(1, 0)
			tweenserv:Create(Background, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
				AnchorPoint = NewVector2(0, 0)
			}):Play()
			tweenserv:Create(Progress, TweenInfo.new(duration or 5, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {
				Size = UDim2.new(1, 0, 0, 2)
			}):Play()
			tweenserv:Create(Progress, TweenInfo.new(duration or 5, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {
				BackgroundColor3 = Color3.new(0, 1, 0)
			}):Play()
			task.wait(duration)
			tweenserv:Create(Background, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
				AnchorPoint = NewVector2(1, 0)
			}):Play()
			for i, v in next, notification.Objects do
				tweenserv:Create(v, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
					BackgroundTransparency = 1
				}):Play()
			end
			tweenserv:Create(TextLabel, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
				TextTransparency = 1
			}):Play()
			tweenserv:Create(UIStroke, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
				Transparency = 1
			}):Play()
		end)
		task.delay(0.25 + duration + 0.25, function()
			table.remove(Library.Notifs, table.find(Library.Notifs, notification))
			notification.Container:Destroy()
		end)
		table.insert(Library.Notifs, notification)
		NotifContainer.Position = UDim2.new(0, Position.X, 0, Position.Y + (table.find(Library.Notifs, notification) * 25))
		NotifContainer.Size = UDim2.new(0, TextLabel.TextBounds.X + 4, 0, 18)
		for i, v in pairs(Library.Notifs) do
			local Position1 = position == "Middle" and NewVector2(viewportSize.X / 2 - (v["Objects"][3].TextBounds.X + 4) / 2, 600) or NewVector2(20, 20)
			tweenserv:Create(v.Container, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
				Position = UDim2.new(0, Position1.X, 0, Position1.Y + (i * 25))
			}):Play()
		end
		return notification
	end
end
--
function Library:Disconnect(Connection)
	Connection:Disconnect()
end
--
function Library.NextFlag()
	Library.UnNamedFlags = Library.UnNamedFlags + 1
	return string.format("%.14g", Library.UnNamedFlags)
end
--
function Library:GetConfig()
	local Config = ""
	for Index, Value in pairs(self.Flags) do
		if Index ~= "SettingsConfigurationName" and Index ~= "SettingConfigurationList" and Index ~= "MenuKey" then
			local Value2 = Value
			local Final = ""
			--
			if typeof(Value2) == "Color3" then
				local hue, sat, val = Value2:ToHSV()
				--
				Final = ("rgb(%s,%s,%s)"):format(hue, sat, val)
			elseif typeof(Value2) == "table" and Value2.Color then
				local hue, sat, val = Value2.Color:ToHSV()
				--
				Final = ("rgb(%s,%s,%s)"):format(hue, sat, val)
			elseif Value2 ~= nil then
				if typeof(Value2) == "boolean" then
					Value2 = ("bool(%s)"):format(tostring(Value2))
				elseif typeof(Value2) == "table" then
					local New = "table("
					--
					for Index2, Value3 in pairs(Value2) do
						New = New .. Value3 .. ","
					end
					--
					if New:sub(#New) == "," then
						New = New:sub(0, #New - 1)
					end
					--
					Value2 = New .. ")"
				elseif typeof(Value2) == "string" then
					Value2 = ("string(%s)"):format(Value2)
				elseif typeof(Value2) == "number" then
					Value2 = ("number(%s)"):format(Value2)
				end
				--
				Final = Value2
			end
			--
			Config = Config .. Index .. ": " .. tostring(Final) .. "\n"
		end
	end
	--
	return Config
end
--
function Library:LoadConfig(Config)
	for i = 1, 10 do
		local Table = string.split(Config, "\n")
		local Table2 = {}
		for Index, Value in pairs(Table) do
			local Table3 = string.split(Value, ":")
			--
			if Table3[1] ~= "ConfigConfig_List" and #Table3 >= 2 then
				local Value = Table3[2]:sub(2, #Table3[2])
				--
				if Value:sub(1, 3) == "rgb" then
					local Table4 = string.split(Value:sub(5, #Value - 1), ",")
					--
					Value = Table4
				elseif Value:sub(1, 3) == "key" then
					local Table4 = string.split(Value:sub(5, #Value - 1), ",")
					--
					if Table4[1] == "nil" and Table4[2] == "nil" then
						Table4[1] = nil
						Table4[2] = nil
					end
					--
					Value = Table4
				elseif Value:sub(1, 4) == "bool" then
					local Bool = Value:sub(6, #Value - 1)
					--
					Value = Bool == "true"
				elseif Value:sub(1, 5) == "table" then
					local Table4 = string.split(Value:sub(7, #Value - 1), ",")
					--
					Value = Table4
				elseif Value:sub(1, 6) == "string" then
					local String = Value:sub(8, #Value - 1)
					--
					Value = String
				elseif Value:sub(1, 6) == "number" then
					local Number = tonumber(Value:sub(8, #Value - 1))
					--
					Value = Number
				end
				--
				Table2[Table3[1]] = Value
			end
		end 
		--
		for i, v in pairs(Table2) do
			if Flags[i] then
				if i ~= "SettingsConfigurationName" and i ~= "SettingConfigurationList" and i ~= "MenuKey" then
					if typeof(Flags[i]) == "table" then
						Flags[i]:Set(v)
					else
						Flags[i](v)
					end
				end
			end
		end
	end
end
--
local FadeTime = 0.2
local Fading = false
local Toggled = Library.Open
local TransparencyCache = {}

function Library:SetOpen()
    if Fading then
        return
    end
    
    Fading = true
    Toggled = not Toggled

    if Toggled then
        Library.Holder.Visible = true
    end

    for _, Desc in ipairs(Library.Holder:GetDescendants()) do
        local Properties = {}

        if Desc:IsA('ImageLabel') then
            table.insert(Properties, 'ImageTransparency')
            table.insert(Properties, 'BackgroundTransparency')
        elseif Desc:IsA('TextLabel') or Desc:IsA('TextBox') then
            table.insert(Properties, 'TextTransparency')
        elseif Desc:IsA('Frame') or Desc:IsA('ScrollingFrame') then
            table.insert(Properties, 'BackgroundTransparency')
        elseif Desc:IsA('UIStroke') then
            table.insert(Properties, 'Transparency')
        end

        local Cache = TransparencyCache[Desc] or {}
        TransparencyCache[Desc] = Cache

        for _, Prop in ipairs(Properties) do
            if Cache[Prop] == nil then
                Cache[Prop] = Desc[Prop]
            end

            local targetTransparency = Toggled and Cache[Prop] or 1
            tweenserv:Create(
                Desc,
                TweenInfo.new(FadeTime, Enum.EasingStyle.Linear),
                {[Prop] = targetTransparency}
            ):Play()
        end
    end

    task.wait(FadeTime)

    Library.Holder.Visible = Toggled
	userinput.MouseIconEnabled = not Toggled
	Library.Open = Toggled

    Fading = false
end
--
function Library:ChangeAccent()
    for Idx, Object in next, Library.ThemeObjects do
        for Property, ColorIdx in next, Object.Properties do
            if type(ColorIdx) == 'string' then
                Object.Instance[Property] = Library[ColorIdx];
            elseif type(ColorIdx) == 'function' then
                Object.Instance[Property] = ColorIdx()
            end
        end;
    end;
end

--
function Library:IsMouseOverFrame(Frame)
	local AbsPos, AbsSize = Frame.AbsolutePosition, Frame.AbsoluteSize;
	if Mouse.X >= AbsPos.X and Mouse.X <= AbsPos.X + AbsSize.X
		and Mouse.Y >= AbsPos.Y and Mouse.Y <= AbsPos.Y + AbsSize.Y then
		return true;
	end;
end;
function Library:KeybindList()
	local KeyList = {
		Keybinds = {}
	}
	local Dragging = {
		false,
		UDim2.new(0, 0, 0, 0)
	}
	Library.KeyList = KeyList
	local KeybindOuter = Library:Create('Frame', {
		AnchorPoint = Vector2.new(0, 0.5),
		BorderColor3 = Color3.new(0, 0, 0),
		Position = UDim2.new(0, 10, 0.5, 0),
		Size = UDim2.new(0, 50, 0, 20),
		Visible = false,
		Parent = Library.ScreenGui
	})
	local KeybindInner = Library:Create('Frame', {
		BackgroundColor3 = "MainColor",
		BorderColor3 = "OutlineColor",
		BorderMode = Enum.BorderMode.Inset,
		Size = UDim2.new(1, 0, 1, 0),
		Parent = KeybindOuter
	})
	local ColorFrame = Library:Create('Frame', {
        BackgroundColor3 = "Accent";
        BorderSizePixel = 0;
        Size = UDim2.new(1, 0, 0, 2);
        Parent = KeybindInner;
    });
	local KeybindLabel = Library:Create('TextButton', {
		Size = UDim2.new(1, 0, 0, 20),
		Position = UDim2.fromOffset(5, 2),
		TextXAlignment = Enum.TextXAlignment.Left,
		Text = 'Keybinds',
		BackgroundColor3 = "MainColor",
		BackgroundTransparency = 1,
		TextColor3 = "FontColor",
		FontFace = Library.Font,
		TextSize = 12.5,
		TextStrokeTransparency = 0,
		Parent = KeybindInner
	})

	local KeybindContainer = Library:Create('Frame', {
		BackgroundTransparency = 1,
		Size = UDim2.new(1, -10, 1, -30),
		Position = UDim2.new(0, 5, 0, 26),
		Parent = KeybindInner
	})
	Library:Create('UIListLayout', {
		FillDirection = Enum.FillDirection.Vertical,
		SortOrder = Enum.SortOrder.LayoutOrder,
		Parent = KeybindContainer
	})
	Library:Create('UIPadding', {
		PaddingLeft = UDim.new(0, -8),
		Parent = KeybindContainer
	})
	Library:Connection(KeybindLabel.MouseButton1Down, function()
		local Location = userinput:GetMouseLocation()
		Dragging[1] = true
		Dragging[2] = UDim2.new(0, Location.X - KeybindOuter.AbsolutePosition.X, 0, Location.Y - KeybindOuter.AbsolutePosition.Y)
	end)
	Library:Connection(userinput.InputEnded, function(Input)
		if Input.UserInputType == Enum.UserInputType.MouseButton1 and Dragging[1] then
			Dragging[1] = false
			Dragging[2] = UDim2.new(0, 0, 0, 0)
		end
	end)
	Library:Connection(userinput.InputChanged, function(Input)
		if Dragging[1] then
			local Location = userinput:GetMouseLocation()
			KeybindOuter.Position = UDim2.new(
                0,
                Location.X - Dragging[2].X.Offset + (KeybindOuter.Size.X.Offset * KeybindOuter.AnchorPoint.X),
                0,
                Location.Y - Dragging[2].Y.Offset + (KeybindOuter.Size.Y.Offset * KeybindOuter.AnchorPoint.Y)
            )
		end
	end)

	local function UpdateSize()
		local YSize = 0
		local XSize = 0
	
		for _, Label in next, KeybindContainer:GetChildren() do
			if Label:IsA('TextLabel') and Label.Visible then
				YSize = YSize + 15;
				if (Label.TextBounds.X > XSize) then
					XSize = Label.TextBounds.X
				end
			end;
		end;

		KeybindOuter.Size = UDim2.new(0, math.max(XSize + 2.5, 210), 0, YSize + 32)
	end
	

	function KeyList:SetVisible(State)
		KeybindOuter.Visible = State
	end
	function KeyList:NewKey(Name, Key, Mode)
		if not Key or Key == "" then
			return
		end
		local KeyValue = {}
		local NewValue = Library:Create('TextLabel', {
			Parent = KeybindContainer,
			Size = UDim2.new(1, -10, 0, 15),
			BackgroundColor3 = Color3.new(1, 1, 1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			Text = tostring(" [" .. Key .. "] " .. Name .. " (" .. Mode .. ") "),
			TextColor3 = Color3.new(0.5686, 0.5686, 0.5686),
			FontFace = Library.Font,
			TextSize = 12,
			TextStrokeTransparency = 0,
			AutomaticSize = Enum.AutomaticSize.Y,
			TextXAlignment = Enum.TextXAlignment.Left,
			LayoutOrder = #KeybindContainer:GetChildren() + 1,
			Visible = false
		})
		function KeyValue:SetVisible(value)
			NewValue.Visible = value
			UpdateSize()
		end
		function KeyValue:Update(NewName, NewKey, NewMode)
			NewValue.Text = tostring(" [" .. NewKey .. "] " .. NewName .. " (" .. NewMode .. ") ")
			NewValue.Visible = true
			UpdateSize()
		end
		local iscolor = false
		function KeyValue:SetColorBlue(hi)
			if hi then
				iscolor = hi
			else
				iscolor = not iscolor
			end
			if iscolor then
				NewValue.TextColor3 = Library.Accent
				Library:AddToThemeObjects(NewValue, {
					TextColor3 = "Accent"
				})
			else
				NewValue.TextColor3 = Color3.new(0.5686, 0.5686, 0.5686)
				Library:RemoveFromThemeObjects(NewValue)
			end
		end
		return KeyValue
	end
	return KeyList
end

function Library:LoadClientTab(Window)
    local ClientPage = Window:Page({
        Name = "Client"
    }) 

    do
       local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer
        local Camera = workspace.CurrentCamera
        local RunService = game:GetService("RunService")
        local Mouse = LocalPlayer:GetMouse()
        local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
        local deletedParts = {}
        local waypointFile = "waypoint.txt"
        local spinning = false
        local spinSpeed = 1
        local platformPart
        local platformFollowEnabled = false
        local platformSize = Vector3.new(10, 1, 10)
        local platformTransparency = 0
        local clickToTeleportEnabled = false
        local teleportDistance = 200
        local xrayEnabled = false
        local xrayDistance = 50
        local aspect_ratio = {
            enabled = false,
            horizontal_stretch = 100,
            vertical_stretch = 50,
        }
        local fovEnabled = false
        local maxZoomEnabled = false
        local minZoomEnabled = false
        local selectedPlayer
        local tweenSpeed = 100
        local loopTeleportEnabled = false
        local loopTweenEnabled = false
        local orbitEnabled = false
        local orbitRadius = 10
        local orbitSpeed = 5

        local function updatePlayerList()
            local playerNames = {}
            for _, player in ipairs(Players:GetPlayers()) do
                if player ~= LocalPlayer then
                    table.insert(playerNames, player.Name)
                end
            end
            return playerNames
        end

        local function applyXray()
            for _, object in ipairs(workspace:GetDescendants()) do
                if object:IsA("BasePart") then
                    local distance = (HumanoidRootPart.Position - object.Position).Magnitude
                    if distance <= xrayDistance then
                        object.Transparency = xrayEnabled and 0.5 or 0
                    end
                end
            end
        end

        local PlayerSection = ClientPage:Section({
            Name = "Players",
            Side = "Left"
        })

        playerDropdown = PlayerSection:Dropdown({
            Name = "Select Player",
            Flag = "PlayerDropdown",
            Options = updatePlayerList(),
            Callback = function(playerName)
                selectedPlayer = Players:FindFirstChild(playerName)
            end,
        })

        PlayerSection:Button({
            Name = "Spectate Player",
            Callback = function()
                if selectedPlayer and selectedPlayer.Character and selectedPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    Camera.CameraSubject = selectedPlayer.Character:FindFirstChild("HumanoidRootPart")
                end
            end,
        })

        PlayerSection:Button({
            Name = "Stop Spectating",
            Callback = function()
                Camera.CameraSubject = LocalPlayer.Character
            end,
        })

        PlayerSection:Slider({
            Name = "Tween Speed",
            Flag = "TweenSpeedSlider",
            Min = 10,
            Max = 300,
            Default = 100,
            Decimals = 1,
            Callback = function(value)
                tweenSpeed = value
            end,
        })

        PlayerSection:Button({
            Name = "Tween To Player",
            Callback = function()
                if selectedPlayer and selectedPlayer.Character and selectedPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    local targetPosition = selectedPlayer.Character.HumanoidRootPart.Position
                    local distance = (HumanoidRootPart.Position - targetPosition).Magnitude
                    local duration = distance / tweenSpeed

                    local tweenService = game:GetService("TweenService")
                    local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear)
                    local goal = {CFrame = CFrame.new(targetPosition)}

                    local tween = tweenService:Create(HumanoidRootPart, tweenInfo, goal)
                    tween:Play()
                end
            end,
        })

        PlayerSection:Button({
            Name = "Teleport To Player",
            Callback = function()
                if selectedPlayer and selectedPlayer.Character and selectedPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    HumanoidRootPart.CFrame = selectedPlayer.Character.HumanoidRootPart.CFrame
                end
            end,
        })

        PlayerSection:Dropdown({
	    Name = "Player Options",
	    Flag = "PlayerOptionsDropdown",
	    Options = {"Loop Teleport", "Loop Tween", "Orbit Player", "Attach To Back"},
	    Callback = function(option)
	        if option == "Loop Teleport" then
	            loopTeleportEnabled = not loopTeleportEnabled
	            if not loopTeleportEnabled then
	                loopTweenEnabled = false
	                orbitEnabled = false
	                attachToBackEnabled = false
	            end
	        elseif option == "Loop Tween" then
	            loopTweenEnabled = not loopTweenEnabled
	            if not loopTweenEnabled then
	                loopTeleportEnabled = false
	                orbitEnabled = false
	                attachToBackEnabled = false
	            end
	        elseif option == "Orbit Player" then
	            orbitEnabled = not orbitEnabled
	            if not orbitEnabled then
	                loopTeleportEnabled = false
	                loopTweenEnabled = false
	                attachToBackEnabled = false
	            end
	        elseif option == "Attach To Back" then
	            attachToBackEnabled = not attachToBackEnabled
	            if not attachToBackEnabled then
	                loopTeleportEnabled = false
	                loopTweenEnabled = false
	                orbitEnabled = false
	            end
	        end
	    end,
	})

	PlayerSection:Button({
	    Name = "Stop Player Options",
	    Callback = function()
	        loopTeleportEnabled = false
	        loopTweenEnabled = false
	        orbitEnabled = false
		attachToBackEnabled = false
	    end,
	})

        PlayerSection:Slider({
            Name = "Orbit Radius",
            Flag = "OrbitRadiusSlider",
            Min = 5,
            Max = 50,
            Default = 10,
            Decimals = 1,
            Callback = function(value)
                orbitRadius = value
            end,
        })

        PlayerSection:Slider({
            Name = "Orbit Speed",
            Flag = "OrbitSpeedSlider",
            Min = 1,
            Max = 20,
            Default = 5,
            Decimals = 1,
            Callback = function(value)
                orbitSpeed = value
            end,
        })

        task.spawn(function()
	    while task.wait(0.1) do
	        if loopTeleportEnabled and selectedPlayer and selectedPlayer.Character and selectedPlayer.Character:FindFirstChild("HumanoidRootPart") then
	            HumanoidRootPart.CFrame = selectedPlayer.Character.HumanoidRootPart.CFrame
	        end
	
	        if loopTweenEnabled and selectedPlayer and selectedPlayer.Character and selectedPlayer.Character:FindFirstChild("HumanoidRootPart") then
	            local targetPosition = selectedPlayer.Character.HumanoidRootPart.Position
	            local distance = (HumanoidRootPart.Position - targetPosition).Magnitude
	            local duration = distance / tweenSpeed
	
	            local tweenService = game:GetService("TweenService")
	            local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear)
	            local goal = {CFrame = CFrame.new(targetPosition)}
	
	            local tween = tweenService:Create(HumanoidRootPart, tweenInfo, goal)
	            tween:Play()
	        end
	
	        if orbitEnabled and selectedPlayer and selectedPlayer.Character and selectedPlayer.Character:FindFirstChild("HumanoidRootPart") then
	            local angle = tick() * orbitSpeed
	            local xOffset = math.cos(angle) * orbitRadius
	            local zOffset = math.sin(angle) * orbitRadius
	            HumanoidRootPart.CFrame = CFrame.new(
	                selectedPlayer.Character.HumanoidRootPart.Position + Vector3.new(xOffset, 0, zOffset),
	                selectedPlayer.Character.HumanoidRootPart.Position
	            )
	        end
	    end
	end)

	PlayerSection:Slider({
	    Name = "Back Offset X",
	    Flag = "BackOffsetXSlider",
	    Min = -10,
	    Max = 10,
	    Default = 0,
	    Decimals = 1,
	    Callback = function(value)
	        backOffsetX = value
	    end,
	})
	
	PlayerSection:Slider({
	    Name = "Back Offset Y",
	    Flag = "BackOffsetYSlider",
	    Min = -10,
	    Max = 10,
	    Default = 0,
	    Decimals = 1,
	    Callback = function(value)
	        backOffsetY = value
	    end,
	})
	
	PlayerSection:Slider({
	    Name = "Back Offset Z",
	    Flag = "BackOffsetZSlider",
	    Min = -10,
	    Max = 10,
	    Default = -5,
	    Decimals = 1,
	    Callback = function(value)
	        backOffsetZ = value
	    end,
	})
	
	task.spawn(function()
	    while task.wait(0.1) do
	        if attachToBackEnabled and selectedPlayer and selectedPlayer.Character and selectedPlayer.Character:FindFirstChild("HumanoidRootPart") then
	            local targetPosition = selectedPlayer.Character.HumanoidRootPart.Position
	            HumanoidRootPart.CFrame = CFrame.new(
	                targetPosition + Vector3.new(backOffsetX, backOffsetY, backOffsetZ),
	                targetPosition
	            )
	        end
	    end
	end)

        local InteractionSection = ClientPage:Section({
            Name = "Interactions",
            Side = "Right"
        })

	InteractionSection:Toggle({
            Name = "Anti AFK",
            Flag = "ClickToDd33cle",
            Callback = function(enabled)
		if enabled then
		for _, v in next, getconnections(plr.Idled) do
			v:Disable()
		end
		local vu = game:GetService("VirtualUser")
		plr.Idled:connect(function()
			vu:Button2Down(Vector2.new(0, 0), camera.CFrame)
			wait(1)
			vu:Button2Up(Vector2.new(0, 0), camera.CFrame)
		end)
	       end
            end,
        })

        InteractionSection:Toggle({
            Name = "Click to Delete",
            Flag = "ClickToDeleteToggle",
            Callback = function(enabled)
                getgenv().ClickToDeleteEnabled = enabled
            end,
        })

        Mouse.Button1Down:Connect(function()
            if getgenv().ClickToDeleteEnabled and Mouse.Target then
                local clone = Mouse.Target:Clone()
                table.insert(deletedParts, {Clone = clone, Parent = Mouse.Target.Parent, Position = Mouse.Target.Position})
                Mouse.Target:Destroy()
            end
        end)

        InteractionSection:Button({
            Name = "Restore Deleted Parts",
            Callback = function()
                for _, partData in ipairs(deletedParts) do
                    if partData.Clone and not partData.Clone.Parent then
                        partData.Clone.Parent = partData.Parent
                        partData.Clone.Position = partData.Position
                    end
                end
                deletedParts = {}
            end,
        })

        InteractionSection:Toggle({
            Name = "Click to Teleport",
            Flag = "ClickToTeleportToggle",
            Callback = function(enabled)
                clickToTeleportEnabled = enabled
            end,
        })

        InteractionSection:Slider({
            Name = "Teleport Distance",
            Flag = "TeleportDistanceSlider",
            Min = 0,
            Max = 500,
            Default = 200,
            Decimals = 1,
            Callback = function(value)
                teleportDistance = value
            end,
        })

        Mouse.Button1Down:Connect(function()
            if clickToTeleportEnabled and Mouse.Target then
                local targetPosition = Mouse.Hit.Position
                local distance = (targetPosition - HumanoidRootPart.Position).Magnitude
                if distance <= teleportDistance then
                    HumanoidRootPart.CFrame = CFrame.new(targetPosition)
                end
            end
        end)

        InteractionSection:Toggle({
            Name = "X-Ray",
            Flag = "XRayToggle",
            Callback = function(enabled)
                xrayEnabled = enabled
                applyXray()
            end,
        })

        InteractionSection:Slider({
            Name = "X-Ray Distance",
            Flag = "XRayDistanceSlider",
            Min = 0,
            Max = 500,
            Default = 50,
            Decimals = 1,
            Callback = function(value)
                xrayDistance = value
                if xrayEnabled then
                    applyXray()
                end
            end,
        })

		
        InteractionSection:Button({
            Name = "Streamer Mode",
            Callback = function()
                local plr = game:GetService("Players").LocalPlayer
                local name = plr.Name
                local display = "discord.gg/gamingchairs"
                
                local function IsA(...)
                    local Args = {...}
                    if table.find(Args, Args[1].ClassName) then
                        return true
                    end
                end
                
                local function e()
                    for _, v in next, workspace:GetDescendants() do
                        if v:IsA("Model") and game:GetService("Players"):GetPlayerFromCharacter(v) == plr then
                            return v
                        end
                    end
                end
                
                local cha = e()
                
                local function changeText(n)
                    plr.Name, plr.DisplayName = name, display
                    if n:IsA("TextLabel") or n:IsA("TextButton") or n:IsA("TextBox") then
                        if n.Text:lower():find(name:lower()) and not n.Text:find("discord.gg/gamingchairs") then
                            n.Text = n.Text:gsub(name:lower(), "discord.gg/gamingchairs")
                        end
                        if n.Text:lower():find(display:lower()) and not n.Text:find("discord.gg/gamingchairs") then
                            n.Text = n.Text:lower():gsub(display:lower(), "discord.gg/gamingchairs")
                        end
                    end
                end
                
                task.spawn(function()
                    plr.Name, plr.DisplayName = name, display
                    while task.wait(5) do
                        for _, v in next, game:GetDescendants() do
                            changeText(v)
                        end
                    end
                end)
                
                game.DescendantAdded:Connect(changeText)
                
                for _, part in next, cha:GetDescendants() do
                    if part:IsA("Part") then
                        part.Color = Color3.fromRGB(math.random(1, 255), math.random(1, 255), math.random(1, 255))
                    end
                    if IsA(part, "Shirt", "Pants", "ShirtGraphic", "Accessory") then
                        part:Destroy()
                    end
                end				
            end
        })

        InteractionSection:Button({
            Name = "Force Shift Lock",
            Callback = function()
                game.Players.LocalPlayer.DevEnableMouseLock = true
            end,
        })

        InteractionSection:Button({
            Name = "Force Death",
            Callback = function()
                game.Players.LocalPlayer.Character.Humanoid.Health = 0
            end,
        })

        local CameraSection = ClientPage:Section({
            Name = "Camera",
            Side = "Left"
        })

        CameraSection:Toggle({
            Name = "FOV Adjustment",
            Flag = "FOVToggle",
            Callback = function(enabled)
                fovEnabled = enabled
                if not enabled then
                    Camera.FieldOfView = 70
                end
            end,
        })

        CameraSection:Slider({
            Name = "Field of View",
            Flag = "FOVSlider",
            Min = 50,
            Max = 120,
            Default = 70,
            Decimals = 1,
            Callback = function(value)
                if fovEnabled then
                    Camera.FieldOfView = value
                end
            end,
        })

        CameraSection:Toggle({
            Name = "Max Zoom Adjustment",
            Flag = "MaxZoomToggle",
            Callback = function(enabled)
                maxZoomEnabled = enabled
                if not enabled then
                    LocalPlayer.CameraMaxZoomDistance = 400
                end
            end,
        })

        CameraSection:Slider({
            Name = "Max Zoom Distance",
            Flag = "MaxZoomSlider",
            Min = 0,
            Max = 1000,
            Default = LocalPlayer.CameraMaxZoomDistance,
            Decimals = 1,
            Callback = function(value)
                if maxZoomEnabled then
                    LocalPlayer.CameraMaxZoomDistance = value
                end
            end,
        })

        CameraSection:Toggle({
            Name = "Min Zoom Adjustment",
            Flag = "MinZoomToggle",
            Callback = function(enabled)
                minZoomEnabled = enabled
                if not enabled then
                    LocalPlayer.CameraMinZoomDistance = 0.5
                end
            end,
        })

        CameraSection:Slider({
            Name = "Min Zoom Distance",
            Flag = "MinZoomSlider",
            Min = 0,
            Max = 1000,
            Default = LocalPlayer.CameraMinZoomDistance,
            Decimals = 1,
            Callback = function(value)
                if minZoomEnabled then
                    LocalPlayer.CameraMinZoomDistance = value
                end
            end,
        })

        CameraSection:Toggle({
            Name = "Aspect Ratio",
            Flag = "AspectRatioToggle",
            Callback = function(state)
                aspect_ratio.enabled = state
            end,
        })

        CameraSection:Slider({
            Name = "Horizontal Stretch",
            Flag = "HorizontalStretchSlider",
            Min = 0,
            Max = 100,
            Default = 100,
            Callback = function(value)
                aspect_ratio.horizontal_stretch = value
            end,
        })

        CameraSection:Slider({
            Name = "Vertical Stretch",
            Flag = "VerticalStretchSlider",
            Min = 0,
            Max = 100,
            Default = 50,
            Callback = function(value)
                aspect_ratio.vertical_stretch = value
            end,
        }) 

        local MiscSection = ClientPage:Section({
            Name = "Miscallenous",
            Side = "Right"
        })

        MiscSection:Toggle({
            Name = "Enable Spin",
            Flag = "SpinToggle",
            Callback = function(enabled)
                spinning = enabled
            end,
        })

        MiscSection:Slider({
            Name = "Spin Speed",
            Flag = "SpinSpeedSlider",
            Min = 1,
            Max = 20,
            Default = 1,
            Decimals = 1,
            Callback = function(value)
                spinSpeed = value
            end,
        })
	
	MiscSection:Toggle({
	    Name = "No Proximity Prompt Delay",
	    Flag = "NoProximityDelayToggle",
	    Callback = function(enabled)
	        if not _G.OriginalHoldDurations then
	            _G.OriginalHoldDurations = {}
	        end
	        if not _G.OriginalActivationDistances then
	            _G.OriginalActivationDistances = {}
	        end
	
	        local function restorePrompts()
	            for prompt, data in pairs(_G.OriginalHoldDurations) do
	                if prompt and prompt:IsA("ProximityPrompt") then
	                    prompt.HoldDuration = data
	                end
	            end
	            for prompt, data in pairs(_G.OriginalActivationDistances) do
	                if prompt and prompt:IsA("ProximityPrompt") then
	                    prompt.MaxActivationDistance = data
	                end
	            end
	        end
	
	        if enabled then
	            for _, v in pairs(game:GetService("Workspace"):GetDescendants()) do
	                if v:IsA("ProximityPrompt") then
	                    if not _G.OriginalHoldDurations[v] then
	                        _G.OriginalHoldDurations[v] = v.HoldDuration
	                    end
	                    if not _G.OriginalActivationDistances[v] then
	                        _G.OriginalActivationDistances[v] = v.MaxActivationDistance
	                    end
	                    v.HoldDuration = 0
	                    v.MaxActivationDistance = 50
	                end
	            end
	
	            game:GetService("ProximityPromptService").PromptButtonHoldBegan:Connect(function(prompt)
	                if prompt and prompt:IsA("ProximityPrompt") then
	                    prompt.HoldDuration = 0
	                end
	            end)
	        else
	            restorePrompts()
	        end
	    end,
	})
	
	MiscSection:Slider({
	    Name = "Custom Hold Duration",
	    Flag = "CustomHoldDurationSlider",
	    Default = 0.5
	    Min = 0,
	    Max = 15,
	    Decimals = 0.1,
	    Callback = function(value)
	        for _, v in pairs(game:GetService("Workspace"):GetDescendants()) do
	            if v:IsA("ProximityPrompt") then
	                if not _G.OriginalHoldDurations[v] then
	                    _G.OriginalHoldDurations[v] = v.HoldDuration
	                end
	                v.HoldDuration = value
	            end
	        end
	    end,
	})
	
	MiscSection:Slider({
	    Name = "Custom Activation Distance",
	    Flag = "CustomActivationDistanceSlider",
	    Min = 1,
	    Max = 100,
	    Decimals = 1,
	    Callback = function(value)
	        for _, v in pairs(game:GetService("Workspace"):GetDescendants()) do
	            if v:IsA("ProximityPrompt") then
	                if not _G.OriginalActivationDistances[v] then
	                    _G.OriginalActivationDistances[v] = v.MaxActivationDistance
	                end
	                v.MaxActivationDistance = value
	            end
	        end
	    end,
	})

        task.spawn(function()
            while task.wait() do
                if spinning and HumanoidRootPart then
                    HumanoidRootPart.CFrame = HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(spinSpeed), 0)
                end
            end
        end)
    end
end

function Library:LoadWorldTab(Window)
    local WorldPage = Window:Page({
        Name = "World"
    })

    do
        local LightingSection = WorldPage:Section({
            Name = "Lighting",
            Side = "Left"
        })

        LightingSection:Toggle({
            Name = "Ambient",
            Flag = "AmbientToggle",
            Callback = function(enabled)
                ambientEnabled = enabled
                if not enabled then
                    game.Lighting.Ambient = Color3.new(0.5, 0.5, 0.5)
                end
            end,
        }):Colorpicker({
            Default = Color3.fromRGB(127, 127, 127),
            Flag = "AmbientColorPicker",
            Callback = function(color)
                if ambientEnabled then
                    game.Lighting.Ambient = color
                end
            end,
        })

        LightingSection:Toggle({
            Name = "Outdoor Ambient",
            Flag = "OutdoorAmbientToggle",
            Callback = function(enabled)
                outdoorAmbientEnabled = enabled
                if not enabled then
                    game.Lighting.OutdoorAmbient = Color3.new(0.25, 0.25, 0.25)
                end
            end,
        }):Colorpicker({
            Default = Color3.fromRGB(200, 200, 200),
            Flag = "OutdoorAmbientColorPicker",
            Callback = function(color)
                if outdoorAmbientEnabled then
                    game.Lighting.OutdoorAmbient = color
                end
            end,
        })

        LightingSection:Toggle({
            Name = "Brightness",
            Flag = "BrightnessToggle",
            Callback = function(enabled)
                brightnessEnabled = enabled
                if not enabled then
                    game.Lighting.Brightness = 2
                end
            end,
        })

        LightingSection:Slider({
            Name = "Brightness Value",
            Flag = "BrightnessSlider",
            Min = 0,
            Max = 10,
            Decimals = 0.1,
            Callback = function(value)
                if brightnessEnabled then
                    game.Lighting.Brightness = value
                end
            end,
        })

        LightingSection:Toggle({
            Name = "Color Shift Top",
            Flag = "ColorShiftTopToggle",
            Callback = function(enabled)
                colorShiftTopEnabled = enabled
                if not enabled then
                    game.Lighting.ColorShift_Top = Color3.new(0, 0, 0)
                end
            end,
        }):Colorpicker({
            Default = Color3.fromRGB(255, 255, 255),
            Flag = "ColorShiftTopColorPicker",
            Callback = function(color)
                if colorShiftTopEnabled then
                    game.Lighting.ColorShift_Top = color
                end
            end,
        })

        LightingSection:Toggle({
            Name = "Color Shift Bottom",
            Flag = "ColorShiftBottomToggle",
            Callback = function(enabled)
                colorShiftBottomEnabled = enabled
                if not enabled then
                    game.Lighting.ColorShift_Bottom = Color3.new(0, 0, 0)
                end
            end,
        }):Colorpicker({
            Default = Color3.fromRGB(255, 255, 255),
            Flag = "ColorShiftBottomColorPicker",
            Callback = function(color)
                if colorShiftBottomEnabled then
                    game.Lighting.ColorShift_Bottom = color
                end
            end,
        })

        LightingSection:Toggle({
            Name = "Global Shadows",
            Flag = "GlobalShadowsToggle",
            Callback = function(enabled)
                game.Lighting.GlobalShadows = enabled
            end,
        })

        LightingSection:Toggle({
            Name = "Environment Specular Scale",
            Flag = "EnvironmentSpecularScaleToggle",
            Callback = function(enabled)
                environmentSpecularScaleEnabled = enabled
                if not enabled then
                    game.Lighting.EnvironmentSpecularScale = 0
                end
            end,
        })

        LightingSection:Slider({
            Name = "Specular Scale",
            Flag = "EnvironmentSpecularScaleSlider",
            Min = 0,
            Max = 1,
            Decimals = 0.01,
            Callback = function(value)
                if environmentSpecularScaleEnabled then
                    game.Lighting.EnvironmentSpecularScale = value
                end
            end,
        })

        LightingSection:Toggle({
            Name = "Environment Diffuse Scale",
            Flag = "EnvironmentDiffuseScaleToggle",
            Callback = function(enabled)
                environmentDiffuseScaleEnabled = enabled
                if not enabled then
                    game.Lighting.EnvironmentDiffuseScale = 0
                end
            end,
        })

        LightingSection:Slider({
            Name = "Diffuse Scale Value",
            Flag = "EnvironmentDiffuseScaleSlider",
            Min = 0,
            Max = 1,
            Decimals = 0.01,
            Callback = function(value)
                if environmentDiffuseScaleEnabled then
                    game.Lighting.EnvironmentDiffuseScale = value
                end
            end,
        })

        LightingSection:Toggle({
            Name = "Shadow Softness",
            Flag = "ShadowSoftnessToggle",
            Callback = function(enabled)
                shadowSoftnessEnabled = enabled
                if not enabled then
                    game.Lighting.ShadowSoftness = 0
                end
            end,
        })

        LightingSection:Slider({
            Name = "Shadow Softness Value",
            Flag = "ShadowSoftnessSlider",
            Min = 0,
            Max = 1,
            Decimals = 0.01,
            Callback = function(value)
                if shadowSoftnessEnabled then
                    game.Lighting.ShadowSoftness = value
                end
            end,
        })

        LightingSection:Toggle({
            Name = "Technology",
            Flag = "TechnologyToggle",
            Callback = function(enabled)
                technologyEnabled = enabled
                if not enabled then
                    game.Lighting.Technology = Enum.Technology.Compatibility
                end
            end,
        })

        LightingSection:Dropdown({
            Name = "Select Technology",
            Flag = "TechnologyDropdown",
            Options = {
                "Compatibility",
                "Future",
                "ShadowMap",
                "Voxel"
            },
            Callback = function(selected)
                if technologyEnabled then
                    if selected == "Compatibility" then
                        game.Lighting.Technology = Enum.Technology.Compatibility
                    elseif selected == "Future" then
                        game.Lighting.Technology = Enum.Technology.Future
                    elseif selected == "ShadowMap" then
                        game.Lighting.Technology = Enum.Technology.ShadowMap
                    elseif selected == "Voxel" then
                        game.Lighting.Technology = Enum.Technology.Voxel
                    end
                end
            end,
        })

        local LightingEffectsSection = WorldPage:Section({
            Name = "Lighting Effects",
            Side = "Right"
        })

        LightingEffectsSection:Toggle({
            Name = "Blur",
            Flag = "BlurToggle",
            Callback = function(enabled)
                if enabled then
                    local blur = Instance.new("BlurEffect", game.Lighting)
                    blur.Size = 0
                    blur.Name = "BlurEffect"
                else
                    local blur = game.Lighting:FindFirstChild("BlurEffect")
                    if blur then blur:Destroy() end
                end
            end,
        })

        LightingEffectsSection:Slider({
            Name = "Blur Size",
            Flag = "BlurSizeSlider",
            Min = 0,
            Max = 50,
            Decimals = 1,
            Callback = function(value)
                local blur = game.Lighting:FindFirstChild("BlurEffect")
                if blur then
                    blur.Size = value
                end
            end,
        })

        LightingEffectsSection:Toggle({
            Name = "Bloom",
            Flag = "BloomToggle",
            Callback = function(enabled)
                if enabled then
                    local bloom = Instance.new("BloomEffect", game.Lighting)
                    bloom.Intensity = 1
                    bloom.Size = 24
                    bloom.Threshold = 2
                    bloom.Name = "BloomEffect"
                else
                    local bloom = game.Lighting:FindFirstChild("BloomEffect")
                    if bloom then bloom:Destroy() end
                end
            end,
        })

        LightingEffectsSection:Slider({
            Name = "Bloom Intensity",
            Flag = "BloomIntensitySlider",
            Min = 0,
            Max = 10,
            Decimals = 0.1,
            Callback = function(value)
                local bloom = game.Lighting:FindFirstChild("BloomEffect")
                if bloom then
                    bloom.Intensity = value
                end
            end,
        })

        LightingEffectsSection:Slider({
            Name = "Bloom Size",
            Flag = "BloomSizeSlider",
            Min = 0,
            Max = 100,
            Decimals = 0.1,
            Callback = function(value)
                local bloom = game.Lighting:FindFirstChild("BloomEffect")
                if bloom then
                    bloom.Size = value
                end
            end,
        })

        LightingEffectsSection:Slider({
            Name = "Bloom Threshold",
            Flag = "BloomThresholdSlider",
            Min = 0,
            Max = 5,
            Decimals = 0.1,
            Callback = function(value)
                local bloom = game.Lighting:FindFirstChild("BloomEffect")
                if bloom then
                    bloom.Threshold = value
                end
            end,
        })

        LightingEffectsSection:Toggle({
            Name = "Sun Rays",
            Flag = "SunRaysToggle",
            Callback = function(enabled)
                if enabled then
                    local sunRays = Instance.new("SunRaysEffect", game.Lighting)
                    sunRays.Intensity = 0.1
                    sunRays.Spread = 0.5
                    sunRays.Name = "SunRaysEffect"
                else
                    local sunRays = game.Lighting:FindFirstChild("SunRaysEffect")
                    if sunRays then sunRays:Destroy() end
                end
            end,
        })

        LightingEffectsSection:Slider({
            Name = "Sun Rays Intensity",
            Flag = "SunRaysIntensitySlider",
            Min = 0,
            Max = 1,
            Decimals = 0.01,
            Callback = function(value)
                local sunRays = game.Lighting:FindFirstChild("SunRaysEffect")
                if sunRays then
                    sunRays.Intensity = value
                end
            end,
        })

        LightingEffectsSection:Slider({
            Name = "Sun Rays Spread",
            Flag = "SunRaysSpreadSlider",
            Min = 0,
            Max = 1,
            Decimals = 0.01,
            Callback = function(value)
                local sunRays = game.Lighting:FindFirstChild("SunRaysEffect")
                if sunRays then
                    sunRays.Spread = value
                end
            end,
        })

	local ExtraSection = WorldPage:Section({
            Name = "Extra Effects",
            Side = "Right"
        })

	ExtraSection:Toggle({
	    Name = "Full Bright",
	    Flag = "DisableG3f3f3e",
	    Callback = function(enabled)
		if not _G.FullBrightExecuted then
			_G.FullBrightEnabled = false
			_G.NormalLightingSettings = {
				Brightness = Lighting.Brightness,
				ClockTime = Lighting.ClockTime,
				FogEnd = Lighting.FogEnd,
				GlobalShadows = Lighting.GlobalShadows,
				Ambient = Lighting.Ambient,
			}
			Lighting:GetPropertyChangedSignal("Brightness"):Connect(function()
				if
					Lighting.Brightness ~= 1
					and Lighting.Brightness
						~= _G.NormalLightingSettings.Brightness
				then
					_G.NormalLightingSettings.Brightness = Lighting.Brightness
					if not _G.FullBrightEnabled then
						repeat
							wait()
						until _G.FullBrightEnabled
					end
					Lighting.Brightness = 1
				end
			end)
			Lighting:GetPropertyChangedSignal("ClockTime"):Connect(function()
				if
					Lighting.ClockTime ~= 12
					and Lighting.ClockTime ~= _G.NormalLightingSettings.ClockTime
				then
					_G.NormalLightingSettings.ClockTime = Lighting.ClockTime
					if not _G.FullBrightEnabled then
						repeat
							wait()
						until _G.FullBrightEnabled
					end
					Lighting.ClockTime = 12
				end
			end)
			Lighting:GetPropertyChangedSignal("FogEnd"):Connect(function()
				if
					Lighting.FogEnd ~= 786543
					and Lighting.FogEnd ~= _G.NormalLightingSettings.FogEnd
				then
					_G.NormalLightingSettings.FogEnd = Lighting.FogEnd
					if not _G.FullBrightEnabled then
						repeat
							wait()
						until _G.FullBrightEnabled
					end
					Lighting.FogEnd = 786543
				end
			end)
			Lighting:GetPropertyChangedSignal("GlobalShadows"):Connect(function()
				if
					Lighting.GlobalShadows ~= false
					and Lighting.GlobalShadows
						~= _G.NormalLightingSettings.GlobalShadows
				then
					_G.NormalLightingSettings.GlobalShadows = Lighting.GlobalShadows
					if not _G.FullBrightEnabled then
						repeat
							wait()
						until _G.FullBrightEnabled
					end
					Lighting.GlobalShadows = false
				end
			end)
			Lighting:GetPropertyChangedSignal("Ambient"):Connect(function()
				if
					Lighting.Ambient ~= Color3.fromRGB(178, 178, 178)
					and Lighting.Ambient ~= _G.NormalLightingSettings.Ambient
				then
					_G.NormalLightingSettings.Ambient = Lighting.Ambient
					if not _G.FullBrightEnabled then
						repeat
							wait()
						until _G.FullBrightEnabled
					end
					Lighting.Ambient = Color3.fromRGB(178, 178, 178)
				end
			end)
			Lighting.Brightness = 1
			Lighting.ClockTime = 12
			Lighting.FogEnd = 786543
			Lighting.GlobalShadows = false
			Lighting.Ambient = Color3.fromRGB(178, 178, 178)
			local LatestValue = true
			spawn(function()
				repeat
					wait()
				until _G.FullBrightEnabled
				while wait() do
					if _G.FullBrightEnabled ~= LatestValue then
						if not _G.FullBrightEnabled then
							Lighting.Brightness =
								_G.NormalLightingSettings.Brightness
							Lighting.ClockTime = _G.NormalLightingSettings.ClockTime
							Lighting.FogEnd = _G.NormalLightingSettings.FogEnd
							Lighting.GlobalShadows =
								_G.NormalLightingSettings.GlobalShadows
							Lighting.Ambient = _G.NormalLightingSettings.Ambient
						else
							Lighting.Brightness = 1
							Lighting.ClockTime = 12
							Lighting.FogEnd = 786543
							Lighting.GlobalShadows = false
							Lighting.Ambient = Color3.fromRGB(178, 178, 178)
						end
						LatestValue = not LatestValue
					end
				end
			end)
		end
		_G.FullBrightExecuted = true
		_G.FullBrightEnabled = not _G.FullBrightEnabled
	    end,
	})

	local RunService = game:GetService("RunService")
	local vim = game:GetService("VirtualInputManager")
	
	ExtraSection:Toggle({
	    Name = "Disable Graphics",
	    Flag = "DisableGraphicsToggle",
	    Callback = function(enabled)
	        RunService:Set3dRenderingEnabled(not enabled)
	    end,
	})
	
	ExtraSection:Toggle({
	    Name = "FPS Booster (Console Disabler)",
	    Flag = "FPSBoosterToggle",
	    Callback = function(enabled)
	        getgenv().boostFPS = enabled
	
	        if enabled then
	            setfpscap(5000)
	
	            game.DescendantAdded:Connect(function(d)
	                if d.Name == "MainView" and d.Parent.Name == "DevConsoleUI" and boostFPS then
	                    task.wait()
	                    local screen = d.Parent.Parent.Parent
	                    screen.Enabled = false
	                    d.Visible = false
	                end
	            end)
	
	            vim:SendKeyEvent(true, "F9", 0, game)
	            task.wait()
	            vim:SendKeyEvent(false, "F9", 0, game)
	
	            spawn(function()
	                while boostFPS do
	                    task.wait()
	                    warn("")
	                end
	            end)
	        else
	            setfpscap(5000)
	        end
	    end,
	})

	ExtraSection:Toggle({
	    Name = "FPS Booster (Graphics & More)",
	    Flag = "FPSBoosterToggle",
	    Callback = function(enabled)
	        if enabled then
	            if not _G.Ignore then
	                _G.Ignore = {}
	            end
	            if not _G.WaitPerAmount then
	                _G.WaitPerAmount = 500
	            end
	
	            if not game:IsLoaded() then
	                repeat
	                    task.wait()
	                until game:IsLoaded()
	            end
	            if not _G.Settings then
	                _G.Settings = {
	                    Players = {
	                        ["Ignore Me"] = true,
	                        ["Ignore Others"] = true,
	                        ["Ignore Tools"] = true
	                    },
	                    Meshes = {
	                        NoMesh = false,
	                        NoTexture = false,
	                        Destroy = false
	                    },
	                    Images = {
	                        Invisible = true,
	                        Destroy = false
	                    },
	                    Explosions = {
	                        Smaller = true,
	                        Invisible = false,
	                        Destroy = false
	                    },
	                    Particles = {
	                        Invisible = true,
	                        Destroy = false
	                    },
	                    TextLabels = {
	                        LowerQuality = false,
	                        Invisible = false,
	                        Destroy = false
	                    },
	                    MeshParts = {
	                        LowerQuality = true,
	                        Invisible = false,
	                        NoTexture = false,
	                        NoMesh = false,
	                        Destroy = false
	                    },
	                    Other = {
	                        ["FPS Cap"] = 240,
	                        ["No Camera Effects"] = true,
	                        ["No Clothes"] = true,
	                        ["Low Water Graphics"] = true,
	                        ["No Shadows"] = true,
	                        ["Low Rendering"] = true,
	                        ["Low Quality Parts"] = true,
	                        ["Low Quality Models"] = true,
	                        ["Reset Materials"] = true,
	                        ["Lower Quality MeshParts"] = true
	                    }
	                }
	            end
	
	            local Players, Lighting, MaterialService = game:GetService("Players"), game:GetService("Lighting"), game:GetService("MaterialService")
	            local ME, CanBeEnabled = Players.LocalPlayer, {"ParticleEmitter", "Trail", "Smoke", "Fire", "Sparkles"}
	            local function PartOfCharacter(Instance)
	                for _, v in pairs(Players:GetPlayers()) do
	                    if v ~= ME and v.Character and Instance:IsDescendantOf(v.Character) then
	                        return true
	                    end
	                end
	                return false
	            end
	            local function DescendantOfIgnore(Instance)
	                for _, v in pairs(_G.Ignore) do
	                    if Instance:IsDescendantOf(v) then
	                        return true
	                    end
	                end
	                return false
	            end
	            local function CheckIfBad(Instance)
	                if not Instance:IsDescendantOf(Players) and (_G.Settings.Players["Ignore Others"] and not PartOfCharacter(Instance) or not _G.Settings.Players["Ignore Others"]) and (_G.Settings.Players["Ignore Me"] and ME.Character and not Instance:IsDescendantOf(ME.Character) or not _G.Settings.Players["Ignore Me"]) and (_G.Settings.Players["Ignore Tools"] and not Instance:IsA("BackpackItem") and not Instance:FindFirstAncestorWhichIsA("BackpackItem") or not _G.Settings.Players["Ignore Tools"]) and (_G.Ignore and not table.find(_G.Ignore, Instance) and not DescendantOfIgnore(Instance) or not _G.Ignore or type(_G.Ignore) ~= "table" or #_G.Ignore <= 0) then
	                    if Instance:IsA("DataModelMesh") then
	                        if _G.Settings.Meshes.NoMesh and Instance:IsA("SpecialMesh") then
	                            Instance.MeshId = ""
	                        end
	                        if _G.Settings.Meshes.NoTexture and Instance:IsA("SpecialMesh") then
	                            Instance.TextureId = ""
	                        end
	                        if _G.Settings.Meshes.Destroy then
	                            Instance:Destroy()
	                        end
	                    elseif Instance:IsA("FaceInstance") then
	                        if _G.Settings.Images.Invisible then
	                            Instance.Transparency = 1
	                            Instance.Shiny = 1
	                        end
	                        if _G.Settings.Images.Destroy then
	                            Instance:Destroy()
	                        end
	                    elseif table.find(CanBeEnabled, Instance.ClassName) then
	                        if _G.Settings.Particles.Invisible then
	                            Instance.Enabled = false
	                        end
	                        if _G.Settings.Particles.Destroy then
	                            Instance:Destroy()
	                        end
	                    elseif Instance:IsA("PostEffect") and _G.Settings.Other["No Camera Effects"] then
	                        Instance.Enabled = false
	                    elseif Instance:IsA("Explosion") then
	                        if _G.Settings.Explosions.Smaller then
	                            Instance.BlastPressure = 1
	                            Instance.BlastRadius = 1
	                        end
	                        if _G.Settings.Explosions.Destroy then
	                            Instance:Destroy()
	                        end
	                    elseif Instance:IsA("Clothing") or Instance:IsA("SurfaceAppearance") then
	                        if _G.Settings.Other["No Clothes"] then
	                            Instance:Destroy()
	                        end
	                    elseif Instance:IsA("BasePart") and not Instance:IsA("MeshPart") then
	                        if _G.Settings.Other["Low Quality Parts"] then
	                            Instance.Material = Enum.Material.Plastic
	                            Instance.Reflectance = 0
	                        end
	                    elseif Instance:IsA("MeshPart") then
	                        if _G.Settings.MeshParts.LowerQuality then
	                            Instance.RenderFidelity = 2
	                            Instance.Reflectance = 0
	                            Instance.Material = Enum.Material.Plastic
	                        end
	                        if _G.Settings.MeshParts.Destroy then
	                            Instance:Destroy()
	                        end
	                    end
	                end
	            end
	
	            game.DescendantAdded:Connect(function(value)
	                task.wait(_G.WaitPerAmount or 1)
	                CheckIfBad(value)
	            end)
	
	            local Descendants = game:GetDescendants()
	            for _, v in pairs(Descendants) do
	                CheckIfBad(v)
	            end
	
	            if _G.Settings.Other["Low Water Graphics"] then
	                workspace:FindFirstChildOfClass("Terrain").WaterWaveSize = 0
	                workspace:FindFirstChildOfClass("Terrain").WaterWaveSpeed = 0
	                workspace:FindFirstChildOfClass("Terrain").WaterReflectance = 0
	                workspace:FindFirstChildOfClass("Terrain").WaterTransparency = 0
	            end
	
	            if _G.Settings.Other["No Shadows"] then
	                Lighting.GlobalShadows = false
	                Lighting.FogEnd = 9e9
	                Lighting.ShadowSoftness = 0
	            end
	
	            if _G.Settings.Other["Low Rendering"] then
	                settings().Rendering.QualityLevel = 1
	            end
	
	            if _G.Settings.Other["Reset Materials"] then
	                for _, v in pairs(MaterialService:GetChildren()) do
	                    v:Destroy()
	                end
	                MaterialService.Use2022Materials = false
	            end
	
	            if _G.Settings.Other["FPS Cap"] and setfpscap then
	                setfpscap(_G.Settings.Other["FPS Cap"])
	            end
	        end
	    end,
	})

	local RunService = game:GetService("RunService")
	local Players = game:GetService("Players")
	local LocalPlayer = Players.LocalPlayer
	
	ExtraSection:Toggle({
	    Name = "Small Rendering",
	    Flag = "SmallRenderingToggle",
	    Callback = function(enabled)
	        getgenv().SmallRenderingEnabled = enabled
	        if not enabled then
	            for _, descendant in ipairs(workspace:GetDescendants()) do
	                if descendant:IsA("BasePart") or descendant:IsA("Model") then
	                    descendant.LocalTransparencyModifier = 0
	                end
	            end
	        end
	    end,
	})
	
	ExtraSection:Slider({
	    Name = "Rendering Distance",
	    Flag = "RenderingDistanceSlider",
	    Min = 50,
	    Max = 1000,
	    Default = 200,
	    Decimals = 1,
	    Callback = function(distance)
	        getgenv().RenderingDistance = distance
	    end,
	})
	
	getgenv().RenderingDistance = 200
	RunService.RenderStepped:Connect(function()
	    if getgenv().SmallRenderingEnabled then
	        for _, descendant in ipairs(workspace:GetDescendants()) do
	            if descendant:IsA("BasePart") or descendant:IsA("Model") then
	                local distance = (descendant.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
	                if distance > getgenv().RenderingDistance then
	                    descendant.LocalTransparencyModifier = 1
	                else
	                    descendant.LocalTransparencyModifier = 0
	                end
	            end
	        end
	    end
	end)
    end
end

--
function Library:LoadConfigTab(Window)
	local Config = Window:Page({
		Name = "Settings"
	})
	do
		local Menu = Config:Section({
			Name = "Menu"
		})
		local PresetThemes = Config:Section({
			Name = "Preset Themes"
		})
		local Themes = Config:Section({
			Name = "Themes Configuration"
		})
		local Info = Config:Section({
			Name = "Script Information"
		})
		local Cfgs = Config:Section({
			Name = "Configs",
			Side = "Right"
		})
		local ScriptSystem = Config:Section({
			Name = "Script System",
			Side = "Right"
		})
		local abc = false
		local CurrentList = {}
		local CFGList, loadedcfgshit, autoloadlabel, randomfunc, maincolor, backgroundcolor, outlinecolor, fontcolor
		local function UpdateConfigList()
			local List = {}
			local SelectedConfig = Library.Flags.SettingConfigurationList
			for idx, file in ipairs(listfiles(ConfigFolder .. "/configs")) do
				local FileName = file:gsub("\\", "/")
				FileName = FileName:match("([^/]+)$")
				List[#List + 1] = FileName
			end
			
			local IsNew = #List ~= #CurrentList
			if not IsNew then
				for idx, file in ipairs(List) do
					if file ~= CurrentList[idx] then
						IsNew = true
						break
					end
				end
			end
			if IsNew then
				CurrentList = List
				CFGList:Refresh(CurrentList)
			end
			if SelectedConfig then
				randomfunc:set("")
				CFGList:Set(SelectedConfig)
				end
			end
				PresetThemes:Dropdown({
				    Name = "Presets",
				    Flag = "UI/Presets",
				    Options = {
					"Corn",
					"Youtube",
					"Spotify",
					"BBot",
					"Fatality",
					"Aimware",
					"Onetap",
					"Mint",
					"Dracula",
					"Gamesense"
				    },
				    State = "Corn",
				    Callback = function(v)
					local themes = {
					    Corn = {
						FontColor = "#DCDCDC",
						MainColor = "#252525",
						Accent = "#FF9000",
						BackgroundColor = "#191919",
						OutlineColor = "#000000"
					    },
					    Youtube = {
						FontColor = "#F1F1F1",
						MainColor = "#232323",
						Accent = "#FF0000",
						BackgroundColor = "#0F0F0F",
						OutlineColor = "#000000"
					    },
					    Spotify = {
						FontColor = "#D0D0D0",
						MainColor = "#181818",
						Accent = "#1ED760",
						BackgroundColor = "#121212",
						OutlineColor = "#0A0A0A"
					    },
					    BBot = {
						FontColor = "#FFFFFF",
						MainColor = "#1E1E1E",
						Accent = "#7E48A3",
						BackgroundColor = "#232323",
						OutlineColor = "#141414"
					    },
					    Fatality = {
						FontColor = "#FFFFFF",
						MainColor = "#1E1842",
						Accent = "#C50754",
						BackgroundColor = "#191335",
						OutlineColor = "#3C355D"
					    },
					    Aimware = {
						FontColor = "#E8E8E8",
						MainColor = "#2B2B2B",
						Accent = "#C82828",
						BackgroundColor = "#191919",
						OutlineColor = "#000005"
					    },
					    Onetap = {
						FontColor = "#D6D9E0",
						MainColor = "#2C3037",
						Accent = "#DDA85D",
						BackgroundColor = "#1F2125",
						OutlineColor = "#000000"
					    },
					    Mint = {
						FontColor = "#FFFFFF",
						MainColor = "#242424",
						Accent = "#3DB488",
						BackgroundColor = "#1C1C1C",
						OutlineColor = "#373737"
					    },
					    Dracula = {
						FontColor = "#B4B4B8",
						MainColor = "#2A2C38",
						Accent = "#9A81B3",
						BackgroundColor = "#252730",
						OutlineColor = "#202126"
					    },
					    Gamesense = {
						FontColor = "#FFFFFF",
						MainColor = "#171717",
						Accent = "#A7D94D",
						BackgroundColor = "#0C0C0C",
						OutlineColor = "#000000"
					    }
					}

			local selectedTheme = themes[v]
			if selectedTheme then
				for i,v in pairs(selectedTheme) do
					Library[i] = Color3.fromHex(v)
				end
				Library.DarkerAccent = Library:GetDarkerColor(Library.Accent)
				if fontcolor then
					fontcolor:Set(Library.FontColor)
				end
				if maincolor then
					maincolor:Set(Library.MainColor)
				end
				if accentcolor then
					accentcolor:Set(Library.Accent)
				end
				if outlinecolor then
					outlinecolor:Set(Library.OutlineColor)
				end
				if 	backgroundcolor then
					backgroundcolor:Set(Library.BackgroundColor)
				end
				Library:ChangeAccent()
			end
		end
		})
		maincolor = Themes:Colorpicker({
			Name = "Main Color",
			flag = "UI/MainColor",
			State = Library.MainColor,
			Callback = function(v)
				Library.MainColor = v
				Library:ChangeAccent()
			end
		})
		backgroundcolor = Themes:Colorpicker({
			Name = "Background Color",
			Flag = "UI/BackgroundColor",
			State = Library.BackgroundColor,
			Callback = function(v)
				Library.BackgroundColor = v
				Library:ChangeAccent()
			end
		})
		accentcolor = Themes:Colorpicker({
			Name = "Accent Color",
			Flag = "UI/AccentColor",
			State = Library.Accent,
			Callback = function(v)
				Library.Accent = v
				Library.DarkerAccent = Library:GetDarkerColor(Library.Accent)
				Library:ChangeAccent()
			end
		})
		outlinecolor = Themes:Colorpicker({
			Name = "Outline Color",
			Flag = "UI/OutlineColor",
			State = Library.OutlineColor,
			Callback = function(v)
				Library.OutlineColor = v
				Library:ChangeAccent()
			end
		})
		fontcolor = Themes:Colorpicker({
			Name = "Font Color",
			Flag = "UI/FontColor",
			State = Library.FontColor,
			Callback = function(v)
				Library.FontColor = v
				Library:ChangeAccent()
			end
		})

		Info:Label({
			Name = "Script Version: 1.12",
			Centered = true,
		})

		Info:Label({
		    Name = "Last Update: " .. os.date("%B %d, %Y", os.time() - 86400),
		    Centered = true,
		})

		Info:Label({
		    Name = "soulhub - 1114257240883482624",
		    Centered = true,
		})

		Info:Label({
		    Name = "gg/gamingchairs",
		    Centered = true,
		})

		Info:Label({
		    Name = "Enjoy Your Expirence",
		    Centered = true,
		})
			
		Info:Label({
		    Name = "© soulhub",
		    Centered = true,
		})

		Menu:Keybind({
			Name = "UI Toggle",
			Flag = "MenuKey",
			Default = Enum.KeyCode.End,
			Mode = "Toggle",
			Callback = function()
				Library:SetOpen()
			end
		})
	
		local ProtectoGuio = protectgui or function() end
		local executor = identifyexecutor and identifyexecutor() or "Shit Executor :)"
		local clientMenuToggle = nil
		local screenGui = nil
		
		local function getFPS()
		    local frames = 0
		    local fps = 0
		    game:GetService("RunService").RenderStepped:Connect(function()
		        frames = frames + 1
		    end)
		    spawn(function()
		        while true do
		            fps = frames
		            frames = 0
		            wait(1)
		        end
		    end)
		    return function()
		        return fps
		    end
		end
		
		local function getPing()
		    return game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValueString()
		end
		
		local function getPlayerCount()
		    return #game:GetService("Players"):GetPlayers()
		end
		
		local function getPlayerCFrame()
		    return tostring(game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:GetPrimaryPartCFrame() or "CFrame unavailable")
		end
		
		local function createGui()
		    if screenGui then return end
		    screenGui = Instance.new("ScreenGui")
		    screenGui.Name = "ServerStatsGui"
		    ProtectoGuio(screenGui)
		    screenGui.Parent = game.CoreGui
		
		    local frame = Instance.new("Frame")
		    frame.Size = UDim2.new(0, 150, 0, 250)
		    frame.Position = UDim2.new(1, -160, 0.5, -125)
		    frame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
		    frame.BorderSizePixel = 2
		    frame.BorderColor3 = Library.Accent
		    frame.Active = true
		    frame.Draggable = true
		    ProtectoGuio(frame)
		    frame.Parent = screenGui
		
		    local titleLabel = Instance.new("TextButton")
		    titleLabel.Size = UDim2.new(1, 0, 0.15, 0)
		    titleLabel.Position = UDim2.new(0, 0, 0, 0)
		    titleLabel.BackgroundTransparency = 1
		    titleLabel.Text = "Client Menu"
		    titleLabel.TextColor3 = Library.Accent
		    titleLabel.Font = Enum.Font.SourceSans
		    titleLabel.TextSize = 24
		    ProtectoGuio(titleLabel)
		    titleLabel.Parent = frame
		
		    local pingLabel = Instance.new("TextLabel")
		    pingLabel.Size = UDim2.new(1, 0, 0.125, 0)
		    pingLabel.Position = UDim2.new(0, 0, 0.15, 0)
		    pingLabel.BackgroundTransparency = 1
		    pingLabel.TextColor3 = Color3.fromRGB(0, 255, 255)
		    pingLabel.Font = Enum.Font.SourceSans
		    pingLabel.TextSize = 18
		    ProtectoGuio(pingLabel)
		    pingLabel.Parent = frame
		
		    local fpsLabel = Instance.new("TextLabel")
		    fpsLabel.Size = UDim2.new(1, 0, 0.125, 0)
		    fpsLabel.Position = UDim2.new(0, 0, 0.275, 0)
		    fpsLabel.BackgroundTransparency = 1
		    fpsLabel.TextColor3 = Color3.fromRGB(255, 255, 0)
		    fpsLabel.Font = Enum.Font.SourceSans
		    fpsLabel.TextSize = 18
		    ProtectoGuio(fpsLabel)
		    fpsLabel.Parent = frame
		
		    local playerCountLabel = Instance.new("TextLabel")
		    playerCountLabel.Size = UDim2.new(1, 0, 0.125, 0)
		    playerCountLabel.Position = UDim2.new(0, 0, 0.4, 0)
		    playerCountLabel.BackgroundTransparency = 1
		    playerCountLabel.TextColor3 = Color3.fromRGB(255, 0, 255)
		    playerCountLabel.Font = Enum.Font.SourceSans
		    playerCountLabel.TextSize = 18
		    ProtectoGuio(playerCountLabel)
		    playerCountLabel.Parent = frame
		
		    local timerLabel = Instance.new("TextLabel")
		    timerLabel.Size = UDim2.new(1, 0, 0.125, 0)
		    timerLabel.Position = UDim2.new(0, 0, 0.525, 0)
		    timerLabel.BackgroundTransparency = 1
		    timerLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
		    timerLabel.Font = Enum.Font.SourceSans
		    timerLabel.TextSize = 18
		    ProtectoGuio(timerLabel)
		    timerLabel.Parent = frame
		
		    local cframeLabel = Instance.new("TextButton")
		    cframeLabel.Size = UDim2.new(1, 0, 0.125, 0)
		    cframeLabel.Position = UDim2.new(0, 0, 0.65, 0)
		    cframeLabel.BackgroundTransparency = 1
		    cframeLabel.Text = "CFRAME"
		    cframeLabel.TextColor3 = Color3.fromRGB(255, 165, 0)
		    cframeLabel.Font = Enum.Font.SourceSans
		    cframeLabel.TextSize = 16
		    ProtectoGuio(cframeLabel)
		    cframeLabel.Parent = frame
		    cframeLabel.MouseButton1Click:Connect(function()
		        setclipboard(getPlayerCFrame())
		    end)
		
		    local executorLabel = Instance.new("TextLabel")
		    executorLabel.Size = UDim2.new(1, 0, 0.125, 0)
		    executorLabel.Position = UDim2.new(0, 0, 0.775, 0)
		    executorLabel.BackgroundTransparency = 1
		    executorLabel.Text = "Executor: " .. executor
		    executorLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
		    executorLabel.Font = Enum.Font.SourceSans
		    executorLabel.TextSize = 16
		    ProtectoGuio(executorLabel)
		    executorLabel.Parent = frame
		
		    local function titleHoverText(hover)
		        titleLabel.Text = hover and "Delete" or "Client Menu"
		        titleLabel.TextColor3 = hover and Color3.fromRGB(255, 0, 0) or Library.Accent
		    end
		
		    titleLabel.MouseEnter:Connect(function() titleHoverText(true) end)
		    titleLabel.MouseLeave:Connect(function() titleHoverText(false) end)
		    titleLabel.MouseButton1Click:Connect(function()
		        screenGui:Destroy()
		        screenGui = nil
		    end)
		
		    local getFPSValue = getFPS()
		    spawn(function()
		        local timer = 0
		        while screenGui do
		            timer += 1
		            local hours = math.floor(timer / 3600)
		            local minutes = math.floor((timer % 3600) / 60)
		            local seconds = timer % 60
		            if hours > 0 then
		                timerLabel.Text = string.format("Timer: %dh %dm %ds", hours, minutes, seconds)
		            elseif minutes > 0 then
		                timerLabel.Text = string.format("Timer: %dm %ds", minutes, seconds)
		            else
		                timerLabel.Text = string.format("Timer: %ds", seconds)
		            end
		            pingLabel.Text = "Ping: " .. getPing()
		            fpsLabel.Text = "FPS: " .. getFPSValue()
		            playerCountLabel.Text = "Players: " .. getPlayerCount()
		            wait(1)
		        end
		    end)
		end
		
		Menu:Toggle({
		    Name = "Local Client Menu",
		    Flag = "Kef3fc453g3st",
		    State = false,
		    Callback = function(state)
		        if state then
		            createGui()
		        elseif screenGui then
		            screenGui:Destroy()
		            screenGui = nil
		        end
		    end
		})

		Menu:Toggle({
			Name = "Keybind List",
			Flag = "KeybindList",
			State = true,
			Callback = function(v)
				Library.KeyshitList:SetVisible(v)
			end
		})

		Menu:Button({
			Name = "Unload",
			Callback = function()
				Library:Unload()
			end
		})

		Menu:Button({
		Name = "Rejoin Game",
		Callback = function()
		   	local ts = game:GetService("TeleportService")
			local p = game:GetService("Players").LocalPlayer
			ts:Teleport(game.PlaceId, p)
		end
		})

		Menu:Label({
		Name = "Developer Functions",
		Centered = true
		})

		Menu:Button({
		Name = "Load Dex",
		Callback = function()
		   loadstring(game:HttpGet("https://raw.githubusercontent.com/minecraftuwfy2431/HERE/refs/heads/main/BROHERE28742MRBE92", true))()
		end
		})

		Menu:Button({
		Name = "Load IY",
		Callback = function()
		     loadstring(game:HttpGet("https://raw.githubusercontent.com/edgeiy/infiniteyield/master/source", true))()
		end
		})

		randomfunc = Cfgs:Textbox({
			Flag = "SettingsConfigurationName",
			Name = "Config name"
		})
		Cfgs:Button({
			Name = "Create",
			Callback = function()
				local ConfigName = Library.Flags.SettingsConfigurationName
				if ConfigName ~= "" or not isfile(ConfigFolder .. "/configs/" .. ConfigName) then
					writefile(ConfigFolder .. "/configs/" .. ConfigName, Library:GetConfig())
					UpdateConfigList()
					randomfunc:set("")
					CFGList:Set(ConfigName)
					Library:Notification("Config Created: " .. ConfigName, 3, nil, "Top")
				end
			end
		})
		CFGList = Cfgs:Dropdown({
			Name = "Saved Configs",
			Flag = "SettingConfigurationList",
			Options = {}
		})
		if not isfolder(ConfigFolder) then
			makefolder(ConfigFolder)
		end
		if not isfolder(ConfigFolder .. "/configs") then
			makefolder(ConfigFolder .. "/configs")
		end
		Cfgs:Button({
			Name = "Save",
			Callback = function()
				local SelectedConfig = Library.Flags.SettingConfigurationList
				if SelectedConfig then
					writefile(ConfigFolder .. "/configs/" .. SelectedConfig, Library:GetConfig())
					Library:Notification("Config Saved: " .. SelectedConfig, 3, nil, "Top")
				else
					Library:Notification("No Config Selected!", 3, nil, "Top")
				end
			end
		})
		Cfgs:Button({
			Name = "Load",
			Callback = function()
				local SelectedConfig = Library.Flags.SettingConfigurationList
				if SelectedConfig then
					Library:LoadConfig(readfile(ConfigFolder .. "/configs/" .. SelectedConfig))
					CFGList:Set(SelectedConfig)
					Library:Notification("Config Loaded: " .. SelectedConfig, 3, nil, "Top")
				else
					Library:Notification("No Config Selected!", 3, nil, "Top")
				end
			end
		})
		Cfgs:Button({
			Name = "Set Auto Load",
			Callback = function()
				local SelectedConfig = Library.Flags.SettingConfigurationList
				if SelectedConfig then
					writefile(ConfigFolder .. "/autoload.txt", Library.Flags.SettingConfigurationList)
					Library:Notification("Config Auto Loaded: " .. Library.Flags.SettingConfigurationList, 7, nil, "Top")
					autoloadlabel:SetText("Current Auto Load: " .. Library.Flags.SettingConfigurationList)
					loadedcfgshit = Library.Flags.SettingConfigurationList
				else
					Library:Notification("No Config Selected!", 3, nil, "Top")
				end
			end
		})
		Cfgs:Button({
			Name = "Delete",
			Callback = function()
				local SelectedConfig = Library.Flags.SettingConfigurationList
				if SelectedConfig then
					delfile(ConfigFolder .. "/configs/" .. SelectedConfig)
					Library:Notification("Config Deleted: " .. SelectedConfig, 3, nil, "Top")
					UpdateConfigList()
					CFGList:Set()
					if SelectedConfig == loadedcfgshit then
						autoloadlabel:SetText("Current Auto Load: None")
						delfile(ConfigFolder .. "/autoload.txt")
					end
				else
					Library:Notification("No Config Selected!", 3, nil, "Top")
				end
			end
		})
		Cfgs:Button({
			Name = "Refresh",
			Callback = function()
				UpdateConfigList()
				Library:Notification("Config List Refreshed", 3, nil, "Top")
			end
		})
		UpdateConfigList()
		autoloadlabel = Cfgs:Label({
			Name = "Current Auto Load:",
			Centered = true
		})
		if isfile(ConfigFolder .. "/autoload.txt") then
			loadedcfgshit = readfile(ConfigFolder .. "/autoload.txt")
			local configFile = ConfigFolder .. "/configs/" .. loadedcfgshit
			if isfile(configFile) then
				autoloadlabel:SetText("Current Auto Load: " .. loadedcfgshit)
				Library:LoadConfig(readfile(configFile))
				CFGList:Set(loadedcfgshit)
			else
				autoloadlabel:SetText("Current Auto Load: None")
			end
		else
			autoloadlabel:SetText("Current Auto Load: None")
		end

		ScriptSystem:Label({
		Name = "Snitch Report System",
		Centered = true
		})

		local snitchUsername = ""
		local videoLink = ""
		local extraContext = ""
		
		ScriptSystem:Textbox({
		    Name = "Snitch Username",
		    Callback = function(input)
		        snitchUsername = input
		    end,
		})
		
		ScriptSystem:Textbox({
		    Name = "Video Link",
		    Callback = function(input)
		        videoLink = input
		    end,
		})
		
		ScriptSystem:Textbox({
		    Name = "Extra Context (Optional)",
		    Callback = function(input)
		        extraContext = input
		    end,
		})
		
		ScriptSystem:Button({
		    Name = "Send Report",
		    Callback = function()
		        if snitchUsername == "" or videoLink == "" then
		            Library:Notification("Error: Snitch Username and Video Link cannot be empty.", 10, nil, "Top")
		        else
		            local reportID = tostring(math.random(1000000, 9999999))
		            Library:Notification("Report Sent - ID: " .. reportID, 10, nil, "Top")
		        end
		    end,
		})

		ScriptSystem:Label({
		Name = "System Abuse Leads To Blacklist",
		Centered = true
		})
	end
end
--
function Library:NewPicker(default, parent, count, flag, callback)
	-- // Instances
	local Icon = Library:Create('TextButton', {
		Parent = parent,
		Position = UDim2.new(1, - (count * 20) - (count * 6), 0.5, 0),
		Size = UDim2.new(0, 20, 0, 10),
		BackgroundColor3 = Color3.fromRGB(45, 45, 45),
		BorderColor3 = Color3.fromRGB(10, 10, 10),
		AnchorPoint = NewVector2(1, 0.5),
		AutoButtonColor = false,
		Text = ""
	})
	local IconInline = Library:Create('Frame', {
		Parent = Icon,
		Position = UDim2.new(0, 1, 0, 1),
		Size = UDim2.new(1, -2, 1, -2),
		BackgroundColor3 = default,
		BorderSizePixel = 0
	})
	local ColorWindow = Library:Create('Frame', {
		Parent = parent,
		Position = UDim2.new(1, -2, 1, 2),
		Size = UDim2.new(0, 188, 0, 170),
		BackgroundColor3 = Color3.fromRGB(45, 45, 45),
		BorderColor3 = Color3.fromRGB(10, 10, 10),
		AnchorPoint = NewVector2(1, 0),
		ZIndex = 100,
		Rotation = 0.00001,
		Visible = false
	})
	local WindowInline = Library:Create('Frame', {
		Parent = ColorWindow,
		Position = UDim2.new(0, 1, 0, 1),
		Size = UDim2.new(1, -2, 1, -2),
		BackgroundColor3 = "MainColor",
		BorderSizePixel = 0,
		ZIndex = 100
	})
	local Color = Library:Create('TextButton', {
		Parent = WindowInline,
		Position = UDim2.new(0, 8, 0, 10),
		Size = UDim2.new(0, 150, 0, 150),
		BackgroundColor3 = default,
		BorderColor3 = Color3.new(0, 0, 0),
		Text = "",
		TextColor3 = Color3.new(0, 0, 0),
		AutoButtonColor = false,
		FontFace = Library.Font,
		TextSize = 14,
		ZIndex = 100
	})
	local Sat = Library:Create('ImageLabel', {
		Parent = Color,
		Size = UDim2.new(1, 0, 1, 0),
		BackgroundColor3 = Color3.new(1, 1, 1),
		BackgroundTransparency = 1,
		BorderSizePixel = 0,
		BorderColor3 = Color3.new(0, 0, 0),
		Image = getcustomasset(Library.Folder .. "sat.jpg"),
		ZIndex = 100
	})
	local Val = Library:Create('ImageLabel', {
		Parent = Color,
		Size = UDim2.new(1, 0, 1, 0),
		BackgroundColor3 = Color3.new(1, 1, 1),
		BackgroundTransparency = 1,
		BorderSizePixel = 0,
		BorderColor3 = Color3.new(0, 0, 0),
		Image = getcustomasset(Library.Folder .. "val.jpg"),
		ZIndex = 100
	})
	local Pointer = Library:Create('Frame', {
		Parent = Color,
		Position = UDim2.new(1, 0, 1, 0),
		Size = UDim2.new(0, 1, 0, 1),
		BackgroundColor3 = Color3.new(1, 1, 1),
		BorderColor3 = Color3.new(0, 0, 0),
		ZIndex = 100
	})
	local Container = Library:Create('Frame', {
		Parent = Color,
		Position = UDim2.new(0, -2, 1, 5),
		Size = UDim2.new(0, 189, 0, 55),
		BackgroundColor3 = Color3.new(1, 1, 1),
		BackgroundTransparency = 1,
		BorderColor3 = Color3.new(0, 0, 0),
		ZIndex = 100
	})
	local ColorOutline = Library:Create('Frame', {
		Parent = Color,
		Position = UDim2.new(0, -1, 0, -1),
		Size = UDim2.new(1, 2, 1, 2),
		BackgroundColor3 = Color3.new(1, 1, 1),
		BackgroundTransparency = 1,
		BorderSizePixel = 0,
		BorderColor3 = Color3.new(0, 0, 0),
		ZIndex = 100
	})
	local UIStroke = Library:Create('UIStroke', {
		Parent = ColorOutline,
		Color = Color3.fromRGB(45, 45, 45)
	})
	local Hue = Library:Create('ImageButton', {
		Parent = Color,
		Position = UDim2.new(1, 10, 0, 0),
		Size = UDim2.new(0, 10, 1, 0),
		BackgroundColor3 = Color3.new(1, 1, 1),
		BorderColor3 = Color3.new(0, 0, 0),
		Image = getcustomasset(Library.Folder .. "hue.jpg"),
		AutoButtonColor = false,
		ZIndex = 100
	})
	local HueOutline = Library:Create('Frame', {
		Parent = Hue,
		Position = UDim2.new(0, -1, 0, -1);
		Size = UDim2.new(1, 2, 1, 2);
		BackgroundColor3 = Color3.new(1, 1, 1);
		BackgroundTransparency = 1;
		BorderSizePixel = 0;
		BorderColor3 = Color3.new(0, 0, 0);
		ZIndex = 100
	})
	local UIStroke2 = Library:Create('UIStroke', {
		Parent = HueOutline;
		Color = Color3.fromRGB(45, 45, 45)
	})
	local HueSlide = Library:Create('Frame', {
		Parent = Hue;
		Size = UDim2.new(1, 0, 0, 3),
		BackgroundColor3 = Color3.new(1, 1, 1),
		BorderColor3 = Color3.new(0, 0, 0)
	})
	local ModeOutline = Library:Create('Frame', {
		Parent = parent;
		Position = UDim2.new(1, 65, 0.5, 0),
		Size = UDim2.new(0, 60, 0, 12),
		BackgroundColor3 = "OutlineColor",
		BorderColor3 = Color3.new(0.0392, 0.0392, 0.0392),
		AnchorPoint = NewVector2(1, 0.5),
		AutomaticSize = Enum.AutomaticSize.Y,
		Visible = false,
		ZIndex = 1020000010
	})
	local ModeInline = Library:Create('Frame', {
		Parent = ModeOutline;
		Position = UDim2.new(0, 1, 0, 1),
		Size = UDim2.new(1, -2, 1, -2),
		BackgroundColor3 = "MainColor",
		BorderSizePixel = 0,
		BorderColor3 = Color3.new(0, 0, 0),
		ZIndex = 100
	})
	local UIListLayout = Library:Create('UIListLayout', {
		Parent = ModeInline;
		SortOrder = Enum.SortOrder.LayoutOrder
	})
	local Hold = Library:Create('TextButton', {
		Parent = ModeInline;
		Size = UDim2.new(1, 0, 0, 15),
		BackgroundColor3 = Color3.new(1, 1, 1),
		BackgroundTransparency = 1,
		BorderSizePixel = 0,
		BorderColor3 = Color3.new(0, 0, 0),
		Text = "Copy",
		TextColor3 = Color3.fromRGB(145, 145, 145),
		AutoButtonColor = false,
		FontFace = Library.Font,
		TextSize = Library.FontSize,
		TextStrokeTransparency = 0,
		ZIndex = 100
	})
	local Toggle = Library:Create('TextButton', {
		Parent = ModeInline;
		Size = UDim2.new(1, 0, 0, 15),
		BackgroundColor3 = Color3.new(1, 1, 1),
		BackgroundTransparency = 1,
		BorderSizePixel = 0,
		BorderColor3 = Color3.new(0, 0, 0),
		Text = "Paste",
		TextColor3 = Color3.fromRGB(145, 145, 145),
		AutoButtonColor = false,
		FontFace = Library.Font,
		TextSize = Library.FontSize,
		TextStrokeTransparency = 0,
		ZIndex = 100
	})
	Library:Connection(Icon.MouseEnter, function()
		Icon.BorderColor3 = Library.Accent
	end)
	--
	Library:Connection(Icon.MouseLeave, function()
		Icon.BorderColor3 = Color3.fromRGB(10, 10, 10)
	end)

	-- // Connections
	local hue, sat, val = default:ToHSV()
	local hsv = default:ToHSV()

	local slidingsaturation = false
	local slidinghue = false

	local function update()
		local real_pos = userinput:GetMouseLocation()
		local mouse_position = NewVector2(real_pos.X, real_pos.Y - 40)
		local relative_palette = (mouse_position - Color.AbsolutePosition)
		local relative_hue     = (mouse_position - Hue.AbsolutePosition)

		--
		if slidingsaturation then
			sat = math.clamp(1 - relative_palette.X / Color.AbsoluteSize.X, 0, 1)
			val = math.clamp(1 - relative_palette.Y / Color.AbsoluteSize.Y, 0, 1)
		end 
		--
		if slidinghue then
			hue = math.clamp(relative_hue.Y / Hue.AbsoluteSize.Y, 0, 1)
		end  
		--
		hsv = Color3.fromHSV(hue, sat, val)
		Pointer.Position = UDim2.new(math.clamp(1 - sat, 0.005, 0.995), 0, math.clamp(1 - val, 0.005, 0.995), 0)
		Color.BackgroundColor3 = Color3.fromHSV(hue, 1, 1)

		IconInline.BackgroundColor3 = hsv
		HueSlide.Position = UDim2.new(0, 0, math.clamp(hue, 0.005, 0.995), 0)
		if flag then
			Library.Flags[flag] = {}
			Library.Flags[flag]["Color"] = Color3.fromRGB(hsv.r * 255, hsv.g * 255, hsv.b * 255)
		end
		callback(Color3.fromRGB(hsv.r * 255, hsv.g * 255, hsv.b * 255))
	end
	local function set(color)
		if type(color) ~= "boolean" then
			if type(color) == "table" then
				color = Color3.fromHSV(color[1], color[2], color[3])
			end
			if type(color) == "string" then
				color = Color3.new(color)
			end
			local oldcolor = hsv
			hue, sat, val = color:ToHSV()
			hsv = Color3.fromHSV(hue, sat, val)
			if hsv ~= oldcolor then
				IconInline.BackgroundColor3 = hsv
				Color.BackgroundColor3 = Color3.fromHSV(hue, 1, 1)
				Pointer.Position = UDim2.new(math.clamp(1 - sat, 0.005, 0.995), 0, math.clamp(1 - val, 0.005, 0.995), 0)
				HueSlide.Position = UDim2.new(0, 0, math.clamp(hue, 0.005, 0.995), 0)
				if flag then
					Library.Flags[flag] = {}
					Library.Flags[flag]["Color"] = Color3.fromRGB(hsv.r * 255, hsv.g * 255, hsv.b * 255)
				end
				callback(Color3.fromRGB(hsv.r * 255, hsv.g * 255, hsv.b * 255))
			end
		end
	end
	Flags[flag] = set
	Library:Connection(Sat.InputBegan, function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			slidingsaturation = true
			update()
		end
	end)
	Library:Connection(Sat.InputEnded, function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			slidingsaturation = false
			update()
		end
	end)
	Library:Connection(Hue.InputBegan, function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			slidinghue = true
			update()
		end
	end)
	Library:Connection(Hue.InputEnded, function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			slidinghue = false
			update()
		end
	end)
	Library:Connection(userinput.InputChanged, function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement then
			if slidinghue then
				update()
			end
			if slidingsaturation then
				update()
			end
		end
	end)
	Library:Connection(Icon.MouseButton1Down, function()
		ColorWindow.Visible = not ColorWindow.Visible
		parent.ZIndex = ColorWindow.Visible and 5 or 1
		if slidinghue then
			slidinghue = false
		end
		if slidingsaturation then
			slidingsaturation = false
		end
	end)
	--
	--
	Library:Connection(Toggle.MouseButton1Down, function()
		set(Color3.new(1, 1, 1))
	end)
	--
	Library:Connection(userinput.InputBegan, function(Input)
		if ModeOutline.Visible and Input.UserInputType == Enum.UserInputType.MouseButton1 then
			if not Library:IsMouseOverFrame(Icon) then
				ModeOutline.Visible = false
			end
		end
	end)
	local colorpickertypes = {}
	Library:Connection(userinput.InputBegan, function(Input)
		if ColorWindow.Visible and Input.UserInputType == Enum.UserInputType.MouseButton1 then
			if not Library:IsMouseOverFrame(ColorWindow) and not Library:IsMouseOverFrame(Icon) then
				ColorWindow.Visible = false
				parent.ZIndex = 1
			end
		end
	end)
	function colorpickertypes:set(color)
		set(color)
	end
	return colorpickertypes, ColorWindow
end
-- // Doc Functions
do
	local Pages = Library.Pages;
	local Sections = Library.Sections;
	function Library:Window(Options)
		local Window = {
			Pages = {};
			Sections = {};
			Elements = {};
			Dragging = {
				false,
				UDim2.new(0, 0, 0, 0)
			};
			Size = UDim2.new(0, 580, 0, 625)
		};
		Library.ScreenGui = Library:Create("ScreenGui", {
			Parent = gethui(),
			DisplayOrder = 2
		}, true)
		local Outline = Library:Create('Frame', {
			Parent = Library.ScreenGui,
			Position = UDim2.new(0.5, 0, 0.5, 0),
			Size = Window.Size,
			BackgroundColor3 = "OutlineColor",
			BorderColor3 = Color3.new(0.0392, 0.0392, 0.0392),
			AnchorPoint = Vector2.new(0.5, 0.5)
		})
		local Highlight = Library:Create('ImageLabel',{
			Parent = Outline,
			ImageColor3 = "Accent",
			Image = getcustomasset(Library.Folder .. "highlight.jpg"),
			ScaleType = Enum.ScaleType.Slice,
			BackgroundTransparency = 1,
			Size = UDim2.new(1, 40, 1, 40),
            Position = UDim2.new(0,-20,0,-20),
            ImageTransparency = 0.8,
			SliceCenter = Rect.new(Vector2.new(21, 21), Vector2.new(79, 79)),
            ZIndex = -1
		})
		local Inline = Library:Create('Frame', {
			Parent = Outline,
			Position = UDim2.new(0, 1, 0, 1),
			Size = UDim2.new(1, -2, 1, -2),
			BackgroundColor3 = "MainColor",
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0)
		})
		local Accent = Library:Create('Frame', {
			Parent = Inline,
			Size = UDim2.new(1, 0, 0, 2),
			BackgroundColor3 = "Accent",
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0)
		})
		local HolderOutline = Library:Create('Frame', {
			Parent = Inline,
			Position = UDim2.new(0, 7, 0, 21),
			Size = UDim2.new(1, -14, 1, -38),
			BackgroundColor3 = "OutlineColor",
			BorderColor3 = Color3.new(0.0392, 0.0392, 0.0392)
		})
		local HolderInline = Library:Create('Frame', {
			Parent = HolderOutline,
			Position = UDim2.new(0, 1, 0, 1),
			Size = UDim2.new(1, -2, 1, -2),
			BackgroundColor3 = "BackgroundColor",
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0)
		})
		local Tabs = Library:Create('Frame', {
			Parent = HolderInline,
			Size = UDim2.new(1, 0, 0, 22),
			BackgroundColor3 = Color3.new(1, 1, 1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0)
		})
		local UIListLayout = Library:Create('UIListLayout', {
			Parent = Tabs,
			FillDirection = Enum.FillDirection.Horizontal,
			SortOrder = Enum.SortOrder.LayoutOrder
		})
		local MarketplaceService = game:GetService("MarketplaceService")
		local gameName = MarketplaceService:GetProductInfo(game.PlaceId).Name
		local currentDate = os.date("%x")
		
		local DragButton = Library:Create('TextButton', {
		    Parent = Outline,
		    Size = UDim2.new(1, 0, 0, 21),
		    BackgroundColor3 = Color3.new(1, 1, 1),
		    BackgroundTransparency = 1,
		    BorderSizePixel = 0,
		    BorderColor3 = Color3.new(0, 0, 0),
		    Text = "soulhub | " .. gameName .. " | " .. currentDate,
		    TextColor3 = Color3.new(1, 1, 1),
		    AutoButtonColor = false,
		    FontFace = Library.Font,
		    TextSize = Library.FontSize,
		    TextStrokeTransparency = 0
		})
		local cursor = Library:Create("ImageLabel", {
			Size = UDim2.new(0, 18, 0, 18),
			BackgroundTransparency = 1,
			ImageColor3 = "Accent",
			Image = getcustomasset(Library.Folder .. "cursor.jpg"),
			ZIndex = 1020000011,
			Parent = Library.ScreenGui,
		})
		Library:Connection(runserv.RenderStepped, function()
			cursor.Position = UDim2.new(0, Mouse.X - 6, 0, Mouse.Y - 2)
			cursor.Visible = Library.Open
		end)
        --
		Library.KeyshitList = Library:KeybindList()
		Library.Holder = Outline
		Window.Elements = {
			TabHolder = Tabs,
			Holder = HolderInline
		}
		Library:Connection(DragButton.MouseButton1Down, function()
			local Location = userinput:GetMouseLocation()
			Window.Dragging[1] = true
			Window.Dragging[2] = UDim2.new(0, Location.X - Outline.AbsolutePosition.X, 0, Location.Y - Outline.AbsolutePosition.Y)
		end)
		Library:Connection(userinput.InputEnded, function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 and Window.Dragging[1] then
				local Location = userinput:GetMouseLocation()
				Window.Dragging[1] = false
				Window.Dragging[2] = UDim2.new(0, 0, 0, 0)
			end
		end)
		Library:Connection(userinput.InputChanged, function(Input)
			local Location = userinput:GetMouseLocation()
			local ActualLocation = nil
			if Window.Dragging[1] then
				Outline.Position = UDim2.new(
                    0,
                    Location.X - Window.Dragging[2].X.Offset + (Outline.Size.X.Offset * Outline.AnchorPoint.X),
                    0,
                    Location.Y - Window.Dragging[2].Y.Offset + (Outline.Size.Y.Offset * Outline.AnchorPoint.Y)
                )
			end
		end)
		function Window:UpdateTabs()
			for Index, Page in pairs(Window.Pages) do
				Page.Elements.Button.Size = UDim2.new(1 / #Window.Pages, 0, 1, 0)
				Page:Turn(Page.Open)
			end
		end
		userinput.MouseIconEnabled = false
		return setmetatable(Window, Library)
	end
    --
	function Library:Page(Properties)
		if not Properties then
			Properties = {}
		end
        --
		local Page = {
			Name = Properties.Name or "Page",
			Window = self,
			Open = false,
			Sections = {},
			Elements = {},
		}
        --
		local TabButton = Library:Create('TextButton', {
			Parent = Page.Window.Elements.TabHolder,
			Size = UDim2.new(0.25, 0, 1, 0),
			BackgroundColor3 = Color3.new(1, 1, 1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0),
			Text = Page.Name,
			TextColor3 = Color3.new(0.5686, 0.5686, 0.5686),
			AutoButtonColor = false,
			FontFace = Library.Font,
			TextSize = Library.FontSize,
			TextStrokeTransparency = 0,
			LineHeight = 1.1,
		})
		local TabAccent = Library:Create('Frame', {
			Parent = TabButton,
			Size = UDim2.new(1, 0, 0, 2),
			BackgroundColor3 = "Accent",
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0),
			Visible = false
		})
		local Left = Library:Create('ScrollingFrame', {
			Parent = Page.Window.Elements.Holder,
			Position = UDim2.new(0, 5, 0, 31),
			Size = UDim2.new(0.485, -3, 1, -32),
			BackgroundColor3 = Color3.new(1, 1, 1),
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0),
			Visible = false,
            CanvasSize = UDim2.new(0, 0, 0, 0),
            ScrollBarThickness = 0,
			BackgroundTransparency = 1
		})
		local Right = Library:Create('ScrollingFrame', {
			Parent = Page.Window.Elements.Holder,
			Position = UDim2.new(0.5, 5, 0, 31),
			Size = UDim2.new(0.485, -3, 1, -32),
			BackgroundColor3 = Color3.new(1, 1, 1),
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0),
			Visible = false,
            CanvasSize = UDim2.new(0, 0, 0, 0),
            ScrollBarThickness = 0,
			BackgroundTransparency = 1
		})
		local UIListLayout = Library:Create('UIListLayout', {
			Parent = Left,
            FillDirection = Enum.FillDirection.Vertical;
            SortOrder = Enum.SortOrder.LayoutOrder;
            HorizontalAlignment = Enum.HorizontalAlignment.Center;
			Padding = UDim.new(0, 12)
		})
		local UIListLayout_2 = Library:Create('UIListLayout', {
			Parent = Right,
            FillDirection = Enum.FillDirection.Vertical;
            SortOrder = Enum.SortOrder.LayoutOrder;
            HorizontalAlignment = Enum.HorizontalAlignment.Center;
			Padding = UDim.new(0, 12)
		})
        local LeftPadding = Library:Create('UIPadding', {
            Parent = Left,
            PaddingTop = UDim.new(0, 4)
        })
        local RightPadding = Library:Create('UIPadding', {
            Parent = Right,
            PaddingTop = UDim.new(0, 4)
        })

        Library:Connection(UIListLayout_2:GetPropertyChangedSignal('AbsoluteContentSize'), function()
            Right.CanvasSize = UDim2.fromOffset(0, UIListLayout_2.AbsoluteContentSize.Y + 8)
        end)
        
        Library:Connection(UIListLayout:GetPropertyChangedSignal('AbsoluteContentSize'), function()
            Left.CanvasSize = UDim2.fromOffset(0, UIListLayout.AbsoluteContentSize.Y + 8)
        end)

		function Page:Turn(bool)
			Library:RemoveFromThemeObjects(TabButton)
			Page.Open = bool
			Left.Visible = Page.Open
			Right.Visible = Page.Open
			TabAccent.Visible = Page.Open
			TabButton.TextColor3 = Page.Open and Library.Accent or Color3.fromRGB(145, 145, 145)
			if bool then
				Library:AddToThemeObjects(TabButton, {TextColor3 = "Accent"})
			end
		end
        --
		Library:Connection(TabButton.MouseButton1Down, function()
			if not Page.Open then
				Page:Turn(true)
				for _, Pages in pairs(Page.Window.Pages) do
					if Pages.Open and Pages ~= Page then
						Pages:Turn(false)
					end
				end
			end
		end)
        --
		Library:Connection(TabButton.MouseEnter, function()
			if not Page.Open then
				TabButton.TextColor3 = Library.Accent
			end
		end)
        --
		Library:Connection(TabButton.MouseLeave, function()
			if not Page.Open then
				TabButton.TextColor3 = Color3.fromRGB(145, 145, 145)
			end
		end)

        -- // Elements
		Page.Elements = {
			Next = Next,
			Back = Back,
			Left = Left,
			Right = Right,
			Button = TabButton,
			Pageindextext = Pageindextext,
		}

        -- // Drawings
		if #Page.Window.Pages == 0 then
			Page:Turn(true)
		end
		Page.Window.Pages[#Page.Window.Pages + 1] = Page
		Page.Window:UpdateTabs()
		return setmetatable(Page, Library.Pages)
	end
    --
	function Pages:Section(Properties)
		if not Properties then
			Properties = {}
		end
        --
		local Section = {
			Name = Properties.Name or "Section",
			Page = self,
			Side = (Properties.side or Properties.Side or "left"):lower(),
			Elements = {},
			Content = {},
		}
        --
		local SectionOutline = Library:Create('Frame', {
			Parent = Section.Side == "left" and Section.Page.Elements.Left or Section.Side == "right" and Section.Page.Elements.Right,
			Size = UDim2.new(1, 0, 0, 20),
			BackgroundColor3 = "OutlineColor",
			BorderColor3 = Color3.new(0.0392, 0.0392, 0.0392),
			AutomaticSize = Enum.AutomaticSize.Y,
		})
		local SectionInline = Library:Create('Frame', {
			Parent = SectionOutline,
			Position = UDim2.new(0, 1, 0, 1),
			Size = UDim2.new(1, -2, 1, -2),
			BackgroundColor3 = "BackgroundColor",
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0)
		})
		local Container = Library:Create('Frame', {
			Parent = SectionInline,
			Position = UDim2.new(0, 7, 0, 12),
			Size = UDim2.new(1, -14, 1, -10),
			BackgroundColor3 = Color3.new(1, 1, 1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0),
			AutomaticSize = Enum.AutomaticSize.Y
		})
		local UIListLayout = Library:Create('UIListLayout', {
			Parent = Container,
			SortOrder = Enum.SortOrder.LayoutOrder,
			Padding = UDim.new(0, 10)
		})
		local Space = Library:Create('Frame', {
			Parent = Container,
			Position = UDim2.new(0, 0, 1, 0),
			Size = UDim2.new(1, 0, 0, 2),
			BackgroundColor3 = Color3.new(1, 1, 1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0),
			LayoutOrder = 1000
		})
		local SectionAccent = Library:Create('Frame', {
			Parent = SectionInline,
			Size = UDim2.new(1, 0, 0, 2),
			BackgroundColor3 = "Accent",
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0)
		})
		local Title = Library:Create('TextLabel', {
			Parent = SectionOutline,
			Position = UDim2.new(0, 10, 0, -6),
			Size = UDim2.new(0, 100, 0, 16),
			BackgroundColor3 = Color3.new(1, 1, 1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0),
			TextColor3 = "FontColor",
			FontFace = Library.Font,
			TextSize = Library.FontSize,
			ZIndex = 3,
			TextXAlignment = Enum.TextXAlignment.Left,
			Text = Section.Name,
			TextStrokeTransparency = 0
		})
		local TextBorder = Library:Create('Frame', {
			Parent = SectionOutline,
			Position = UDim2.new(0, 6, 0, -2),
			Size = UDim2.new(0, Title.TextBounds.X + 8, 0, 4),
			BackgroundColor3 = "BackgroundColor",
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0)
		})

        -- // Elements
		Section.Elements = {
			SectionContent = Container;
			SectionHolder = SectionOutline;
		}

        -- // Returning
		Section.Page.Sections[#Section.Page.Sections + 1] = Section
		task.wait()
		TextBorder.Size = UDim2.new(0, Title.TextBounds.X + 8, 0, 5)
		return setmetatable(Section, Library.Sections)
	end
    --
	function Sections:Toggle(Properties)
		if not Properties then
			Properties = {}
		end
        --
		local Toggle = {
			Window = self.Window,
			Page = self.Page,
			Section = self,
			Risky = Properties.Risky or false,
			Name = Properties.Name or "Toggle",
			State = (
                Properties.state
                    or Properties.State
                    or Properties.def
                    or Properties.Def
                    or Properties.default
                    or Properties.Default
                    or false
            ),
			Callback = (
                Properties.callback
                    or Properties.Callback
                    or Properties.callBack
                    or Properties.CallBack
                    or function()
			end
            ),
			Flag = (
                Properties.flag
                    or Properties.Flag
                    or Properties.pointer
                    or Properties.Pointer
                    or Library.NextFlag()
            ),
			Toggled = false,
			Colorpickers = 0,
			ListValue = nil,
		}
        --
		local NewToggle = Library:Create('TextButton', {
			Parent = Toggle.Section.Elements.SectionContent,
			Size = UDim2.new(1, 0, 0, 10),
			BackgroundColor3 = Color3.new(1, 1, 1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0),
			Text = "",
			TextColor3 = Color3.new(0, 0, 0),
			AutoButtonColor = false,
			FontFace = Library.Font,
			TextSize = 14
		})
		local Outline = Library:Create('Frame', {
			Parent = NewToggle,
			Size = UDim2.new(0, 10, 0, 10),
			BackgroundColor3 = "OutlineColor",
			BorderColor3 = Color3.new(0.0392, 0.0392, 0.0392)
		})
		local Inline = Library:Create('Frame', {
			Parent = Outline,
			Position = UDim2.new(0, 1, 0, 1),
			Size = UDim2.new(1, -2, 1, -2),
			BackgroundColor3 = "BackgroundColor",
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0)
		})
		local Title = Library:Create('TextLabel', {
			Parent = NewToggle,
			Position = UDim2.new(0, 15, 0, 0),
			Size = UDim2.new(1, 0, 0, 10),
			BackgroundColor3 = Color3.new(1, 1, 1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0),
			TextColor3 = Toggle.Risky and Color3.fromRGB(255, 77, 74) or Color3.new(0.5686, 0.5686, 0.5686),
			FontFace = Library.Font,
			TextSize = Library.FontSize,
			TextXAlignment = Enum.TextXAlignment.Left,
			Text = Toggle.Name,
			TextStrokeTransparency = 0
		})
        -- // Functions
		local function SetState(value)
			if value == true then
				Toggle.Toggled = true
			elseif value == false then
				Toggle.Toggled = false
			else
				Toggle.Toggled = not Toggle.Toggled
			end
			if Toggle.Toggled then
				Library:AddToThemeObjects(Outline, {
					BackgroundColor3 = "DarkerAccent"
				})
				Library:AddToThemeObjects(Inline, {
					BackgroundColor3 = "Accent"
				})
				if not Toggle.Risky then
					Library:AddToThemeObjects(Title, {TextColor3 = "FontColor"})
				end
				Outline.BackgroundColor3 = Library.DarkerAccent
				Inline.BackgroundColor3 = Library.Accent
				if Toggle.ListValue then
					Toggle.ListValue:SetColorBlue(true)
				end
			else
				Library:RemoveFromThemeObjects(Outline)
				Library:RemoveFromThemeObjects(Inline)
				if not Toggle.Risky then
					Library:RemoveFromThemeObjects(Title)
				end
				Outline.BackgroundColor3 = Library.OutlineColor
				Inline.BackgroundColor3 = Library.BackgroundColor
				if Toggle.ListValue then
					Toggle.ListValue:SetColorBlue(false)
				end
			end
			Library.Flags[Toggle.Flag] = Toggle.Toggled
			task.spawn(Toggle.Callback, Toggle.Toggled)
		end
        --
		Library:Connection(NewToggle.MouseButton1Down, SetState)
		Library:Connection(NewToggle.MouseEnter, function()
			Outline.BackgroundColor3 = Library.DarkerAccent
			Title.TextColor3 = Toggle.Risky and Color3.fromRGB(255, 0, 0) or Library.Accent
		end)
		
		Library:Connection(NewToggle.MouseLeave, function()
			Outline.BackgroundColor3 = Toggle.Toggled and Library.DarkerAccent or Library.OutlineColor
			if Toggle.Risky then
				Title.TextColor3 = Toggle.Toggled and Color3.fromRGB(255, 0, 0) or Color3.fromRGB(255, 77, 74)
			else
				Title.TextColor3 = Toggle.Toggled and Library.FontColor or Color3.fromRGB(145, 145, 145)
			end
		end)		
		function Toggle:Keybind(Properties)
			local Properties = Properties or {}
			local Keybind = {
				Section = self,
				State = (
                    Properties.state
                        or Properties.State
                        or Properties.def
                        or Properties.Def
                        or Properties.default
                        or Properties.Default
                        or nil
                ),
				Mode = (Properties.mode or Properties.Mode or "Toggle"),
				Ignore = (Properties.ignore or Properties.Ignore or false),
				UseKey = (Properties.UseKey or false),
				Callback = (
                    Properties.callback
                        or Properties.Callback
                        or Properties.callBack
                        or Properties.CallBack
                        or function()
				end
                ),
				Flag = (
                    Properties.flag
                        or Properties.Flag
                        or Properties.pointer
                        or Properties.Pointer
                        or Library.NextFlag()
                ),
				Name = Properties.name or Properties.Name or "Keybind",
				Binding = nil,
			}
			local Key
			local State = false
            --
			local Outline = Library:Create('TextButton', {
				Parent = NewToggle,
				Position = UDim2.new(1, 0, 0.5, 0),
				Size = UDim2.new(0, 40, 0, 12),
				BackgroundColor3 = "OutlineColor",
				BorderColor3 = Color3.new(0.0392, 0.0392, 0.0392),
				AnchorPoint = NewVector2(1, 0.5),
				Text = "",
				AutoButtonColor = false
			})
			local Inline = Library:Create('Frame', {
				Parent = Outline,
				Position = UDim2.new(0, 1, 0, 1),
				Size = UDim2.new(1, -2, 1, -2),
				BackgroundColor3 = "MainColor",
				BorderSizePixel = 0,
				BorderColor3 = Color3.new(0, 0, 0)
			})
			local Value = Library:Create('TextLabel', {
				Parent = Inline,
				Size = UDim2.new(1, 0, 1, 0),
				BackgroundColor3 = Color3.new(1, 1, 1),
				BackgroundTransparency = 1,
				BorderSizePixel = 0,
				BorderColor3 = Color3.new(0, 0, 0),
				Text = "",
				TextColor3 = "FontColor",
				FontFace = Library.Font,
				TextSize = Library.FontSize,
				TextStrokeTransparency = 0
			})
			local ModeOutline = Library:Create('Frame', {
				Parent = NewToggle,
				Position = UDim2.new(1, 65, 0.5, 0),
				Size = UDim2.new(0, 60, 0, 12),
				BackgroundColor3 = "OutlineColor",
				BorderColor3 = Color3.new(0.0392, 0.0392, 0.0392),
				AnchorPoint = NewVector2(1, 0.5),
				AutomaticSize = Enum.AutomaticSize.Y,
				Rotation = 0.00001,
				Visible = false,
				ZIndex = 1020000010
			})
			local ModeInline = Library:Create('Frame', {
				Parent = ModeOutline,
				Position = UDim2.new(0, 1, 0, 1),
				Size = UDim2.new(1, -2, 1, -2),
				BackgroundColor3 = "MainColor",
				BorderSizePixel = 0,
				BorderColor3 = Color3.new(0, 0, 0),
				ZIndex = 1020000010
			})
			local UIListLayout = Library:Create('UIListLayout', {
				Parent = ModeInline,
				SortOrder = Enum.SortOrder.LayoutOrder
			})
			local Hold = Library:Create('TextButton', {
				Parent = ModeInline,
				Size = UDim2.new(1, 0, 0, 15),
				BackgroundColor3 = Color3.new(1, 1, 1),
				BackgroundTransparency = 1,
				BorderSizePixel = 0,
				BorderColor3 = Color3.new(0, 0, 0),
				Text = "Hold",
				TextColor3 = Color3.new(0.5686, 0.5686, 0.5686),
				AutoButtonColor = false,
				FontFace = Library.Font,
				TextSize = Library.FontSize,
				TextStrokeTransparency = 0,
				ZIndex = 1020000010
			})
			local Toggle = Library:Create('TextButton', {
				Parent = ModeInline,
				Size = UDim2.new(1, 0, 0, 15),
				BackgroundColor3 = Color3.new(1, 1, 1),
				BackgroundTransparency = 1,
				BorderSizePixel = 0,
				BorderColor3 = Color3.new(0, 0, 0),
				Text = "Toggle",
				TextColor3 = Color3.new(0.5686, 0.5686, 0.5686),
				AutoButtonColor = false,
				FontFace = Library.Font,
				TextSize = Library.FontSize,
				TextStrokeTransparency = 0,
				ZIndex = 1020000010
			})
			self.ListValue = Library.KeyList:NewKey(tostring(Keybind.State):gsub("Enum.KeyCode.", ""), Title.Text, Keybind.Mode)
			
			local c
            -- // Functions
			local function set(newkey)
				local modetable = {"Toggle","Hold"}
				if string.find(tostring(newkey), "Enum") then
					if c then
						c:Disconnect()
						SetState(false)
					end
					if tostring(newkey):find("Enum.KeyCode.") then
						newkey = Enum.KeyCode[tostring(newkey):gsub("Enum.KeyCode.", "")]
					elseif tostring(newkey):find("Enum.UserInputType.") then
						newkey = Enum.UserInputType[tostring(newkey):gsub("Enum.UserInputType.", "")]
					end
					if newkey == Enum.KeyCode.Backspace or newkey == Enum.KeyCode.Escape then
						Key = nil
						if Keybind.UseKey then
							if Keybind.Flag then
								Library.Flags[Keybind.Flag] = Key
							end
							task.spawn(Keybind.Callback, Key)
						end
						local text = ""
						Value.Text = text
						self.ListValue:Update(text, self.Name, Keybind.Mode)
						self.ListValue:SetVisible(false)
					elseif newkey ~= nil then
						Key = newkey
						if Keybind.UseKey then
							if Keybind.Flag then
								Library.Flags[Keybind.Flag] = Key
							end
							task.spawn(Keybind.Callback, Key)
						end
						local text = (Library.Keys[newkey] or tostring(newkey):gsub("Enum.KeyCode.", ""))
						Value.Text = text
						self.ListValue:Update(text, self.Name, Keybind.Mode)
					end
					Library.Flags[Keybind.Flag .. "_KEY"] = newkey
				elseif table.find(modetable, newkey) then
					if not Keybind.UseKey then
						if Keybind.Mode == "Toggle" then
							Toggle.TextColor3 = Library.FontColor
							Hold.TextColor3 = Color3.fromRGB(145, 145, 145)
							Library:AddToThemeObjects(Toggle, {TextColor3 = "FontColor"})
							Library:RemoveFromThemeObjects(Hold)
						elseif Keybind.Mode == "Hold" then
							Hold.TextColor3 = Library.FontColor
							Toggle.TextColor3 = Color3.fromRGB(145, 145, 145)
							Library:AddToThemeObjects(Hold, {TextColor3 = "FontColor"})
							Library:RemoveFromThemeObjects(Toggle)
						end
						Library.Flags[Keybind.Flag .. "_KEY STATE"] = newkey
						Keybind.Mode = newkey
						if Key ~= nil then
							self.ListValue:Update((Library.Keys[Key] or tostring(Key):gsub("Enum.KeyCode.", "")), self.Name, Keybind.Mode)
						end
					end
				else
					State = newkey
					if Keybind.Flag then
						Library.Flags[Keybind.Flag] = newkey
					end
					task.spawn(Keybind.Callback, newkey)
				end
			end
            --
			set(Keybind.State)
			set(Keybind.Mode)
			Library:Connection(Outline.MouseButton1Click, function()
				if not Keybind.Binding then
					Value.Text = "..."
					Keybind.Binding = Library:Connection(userinput.InputBegan, function(input, gpe)
						set(input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode or input.UserInputType)
						Library:Disconnect(Keybind.Binding)
						task.wait()
						Keybind.Binding = nil
					end
                    )
				end
			end)
            --
			Library:Connection(userinput.InputBegan, function(inp)
				if not userinput:GetFocusedTextBox() then	
					if (inp.KeyCode == Key or inp.UserInputType == Key) and not Keybind.Binding and not Keybind.UseKey then
						if Keybind.Mode == "Hold" then
							c = Library:Connection(runserv.RenderStepped, function()
								SetState(true)
							end)
						elseif Keybind.Mode == "Toggle" then
							SetState()
							if self.Toggled then
								if self.Risky then
									Title.TextColor3 = Color3.fromRGB(255, 0, 0)
								else
									Title.TextColor3 = Library.FontColor
								end
							else
								if self.Risky then
									Title.TextColor3 = Color3.fromRGB(255, 77, 74)
								else
									Title.TextColor3 = Color3.fromRGB(145, 145, 145)
								end
							end
						end
					end
				end
			end)
            --
			Library:Connection(userinput.InputEnded, function(inp)
				if not userinput:GetFocusedTextBox() then
					if Keybind.Mode == "Hold" and not Keybind.UseKey then
						if Key ~= "" or Key ~= nil then
							if inp.KeyCode == Key or inp.UserInputType == Key then
								if c then
									c:Disconnect()
									SetState(false)
								end
							end
						end
					end
				end
			end)
            --
			Library:Connection(Outline.MouseEnter, function()
				Outline.BorderColor3 = Library.Accent
			end)
            --
			Library:Connection(Outline.MouseLeave, function()
				Outline.BorderColor3 = Color3.new(0.0392, 0.0392, 0.0392)
			end)
            --
			Library:Connection(Outline.MouseButton2Down, function()
				ModeOutline.Visible = not ModeOutline.Visible
			end)
            --
			Library:Connection(Hold.MouseButton1Down, function()
				set("Hold")
				Hold.TextColor3 = Library.FontColor
				Toggle.TextColor3 = Color3.fromRGB(145, 145, 145)
			end)
            --
			Library:Connection(Toggle.MouseButton1Down, function()
				set("Toggle")
				Toggle.TextColor3 = Library.FontColor
				Hold.TextColor3 = Color3.fromRGB(145, 145, 145)
			end)
            --
			Library:Connection(userinput.InputBegan, function(Input)
				if ModeOutline.Visible and Input.UserInputType == Enum.UserInputType.MouseButton1 then
					if not Library:IsMouseOverFrame(ModeOutline) then
						ModeOutline.Visible = false
					end
				end
			end)
            --
			Library.Flags[Keybind.Flag .. "_KEY"] = Keybind.State
			Library.Flags[Keybind.Flag .. "_KEY STATE"] = Keybind.Mode
			Flags[Keybind.Flag] = set
			Flags[Keybind.Flag .. "_KEY"] = set
			Flags[Keybind.Flag .. "_KEY STATE"] = set
            --
			function Keybind:Set(key)
				set(key)
			end
        
            -- // Returning
			return Keybind
		end
		function Toggle:Colorpicker(Properties)
			local Properties = Properties or {}
			local Colorpicker = {
				State = (
                    Properties.state
                        or Properties.State
                        or Properties.def
                        or Properties.Def
                        or Properties.default
                        or Properties.Default
                        or Color3.fromRGB(255, 0, 0)
                ),
				Callback = (
                    Properties.callback
                        or Properties.Callback
                        or Properties.callBack
                        or Properties.CallBack
                        or function()
				end
                ),
				Flag = (
                    Properties.flag
                        or Properties.Flag
                        or Properties.pointer
                        or Properties.Pointer
                        or Library.NextFlag()
                ),
			}
            -- // Functions
			Toggle.Colorpickers = Toggle.Colorpickers + 1
			local colorpickertypes = Library:NewPicker(
                Colorpicker.State,
                NewToggle,
                Toggle.Colorpickers - 1,
                Colorpicker.Flag,
                Colorpicker.Callback
            )
			function Colorpicker:Set(color)
				colorpickertypes:set(color)
			end

            -- // Returning
			return Colorpicker
		end
		function Toggle.Set(bool)
			bool = type(bool) == "boolean" and bool or false
			if Toggle.Toggled ~= bool then
				SetState()
				if Toggle.Risky then
					Title.TextColor3 = Toggle.Toggled and Color3.fromRGB(255, 0, 0) or Color3.fromRGB(255, 77, 74)
				else
					Title.TextColor3 = Toggle.Toggled and Library.FontColor or Color3.fromRGB(145, 145, 145)
				end
			end
		end
        -- // Misc Functions
		Toggle.Set(Toggle.State)
		Library.Flags[Toggle.Flag] = Toggle.State
		Flags[Toggle.Flag] = Toggle.Set
		Library.Toggles[Toggle.Flag] = Toggle

        -- // Returning
		return Toggle
	end
    --
	function Sections:Slider(Properties)
		if not Properties then
			Properties = {}
		end
        --
		local Slider = {
			Window = self.Window,
			Page = self.Page,
			Section = self,
			Name = Properties.Name or nil,
			Min = (Properties.min or Properties.Min or Properties.minimum or Properties.Minimum or 0),
			State = (
                Properties.state
                    or Properties.State
                    or Properties.def
                    or Properties.Def
                    or Properties.default
                    or Properties.Default
                    or 0
            ),
			Max = (Properties.max or Properties.Max or Properties.maximum or Properties.Maximum or 100),
			Sub = (
                Properties.suffix
                    or Properties.Suffix
                    or Properties.ending
                    or Properties.Ending
                    or Properties.prefix
                    or Properties.Prefix
                    or Properties.measurement
                    or Properties.Measurement
                    or ""
            ),
			Decimals = (Properties.decimals or Properties.Decimals or 1),
			Callback = (
                Properties.callback
                    or Properties.Callback
                    or Properties.callBack
                    or Properties.CallBack
                    or function()
			end
            ),
			Flag = (
                Properties.flag
                    or Properties.Flag
                    or Properties.pointer
                    or Properties.Pointer
                    or Library.NextFlag()
            ),
			Disabled = (Properties.Disabled or Properties.disable or nil),
		}
		local TextValue = ("[value]" .. Slider.Sub)
        --
		local NewSlider = Library:Create('TextButton', {
			Parent = Slider.Section.Elements.SectionContent,
			Size = UDim2.new(1, 0, 0, 22),
			BackgroundColor3 = Color3.new(1, 1, 1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0),
			Text = "",
			TextColor3 = Color3.new(0, 0, 0),
			AutoButtonColor = false,
			FontFace = Library.Font,
			TextSize = 14,
		})
		local Outline = Library:Create('Frame', {
			Parent = NewSlider,
			Position = UDim2.new(0, 15, 1, 0),
			Size = UDim2.new(1, -30, 0, 7),
			BackgroundColor3 = "OutlineColor",
			BorderColor3 = Color3.new(0.0392, 0.0392, 0.0392),
			AnchorPoint = NewVector2(0, 1)
		})
		local Inline = Library:Create('Frame', {
			Parent = Outline,
			Position = UDim2.new(0, 1, 0, 1),
			Size = UDim2.new(1, -2, 1, -2),
			BackgroundColor3 = "MainColor",
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0)
		})
		local Accent = Library:Create('TextButton', {
			Parent = Inline,
			Size = UDim2.new(0, 0, 1, 0),
			BackgroundColor3 = "Accent",
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0),
			Text = "",
			TextColor3 = Color3.new(0, 0, 0),
			AutoButtonColor = false,
			FontFace = Library.Font,
			TextSize = 14
		})
		local Add = Library:Create('TextButton', {
			Parent = Outline,
			Position = UDim2.new(1, 5, 0.5, 0),
			Size = UDim2.new(0, 10, 0, 10),
			BackgroundColor3 = Color3.new(1, 1, 1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0),
			AnchorPoint = NewVector2(0, 0.5),
			Text = "+",
			TextColor3 = Color3.new(0.5686, 0.5686, 0.5686),
			AutoButtonColor = false,
			FontFace = Library.Font,
			TextSize = Library.FontSize,
			TextStrokeTransparency = 0
		})
		local Subtract = Library:Create('TextButton', {
			Parent = Outline,
			Position = UDim2.new(0, -15, 0.5, 0),
			Size = UDim2.new(0, 10, 0, 10),
			BackgroundColor3 = Color3.new(1, 1, 1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0),
			AnchorPoint = NewVector2(0, 0.5),
			Text = "-",
			TextColor3 = Color3.new(0.5686, 0.5686, 0.5686),
			AutoButtonColor = false,
			FontFace = Library.Font,
			TextSize = Library.FontSize,
			TextStrokeTransparency = 0
		})
		local Title = Library:Create('TextLabel', {
			Parent = NewSlider,
			Position = UDim2.new(0, 15, 0, 0),
			Size = UDim2.new(1, 0, 0, 10),
			BackgroundColor3 = Color3.new(1, 1, 1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0),
			TextColor3 = Color3.new(0.5686, 0.5686, 0.5686),
			FontFace = Library.Font,
			TextSize = Library.FontSize,
			TextXAlignment = Enum.TextXAlignment.Left,
			Text = Slider.Name,
			TextStrokeTransparency = 0,
		})
		local Value = Library:Create('TextBox', {
			Parent = NewSlider,
			Position = UDim2.new(0, 15, 0, 0),
			Size = UDim2.new(1, -30, 0, 10),
			BackgroundColor3 = Color3.new(1, 1, 1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0),
			TextColor3 = "FontColor",
			FontFace = Library.Font,
			TextSize = Library.FontSize,
			TextXAlignment = Enum.TextXAlignment.Right,
			TextStrokeTransparency = 0
		})
        --
        -- // Functions
		local Sliding = false
		local Val = Slider.State
		local function Round(Number, Float)
			return math.floor(Number / Float + 0.5) * Float
		end
		
		local function Set(value)
			value = math.clamp(Round(value, Slider.Decimals), Slider.Min, Slider.Max)
			local sizeX = ((value - Slider.Min) / (Slider.Max - Slider.Min))
			Accent.Size = UDim2.new(sizeX, 0, 1, 0)
            --Value.Text = TextValue:gsub("%[value%]", string.format("%.14g", value))
			if Slider.Disabled and value == Slider.Min then
				Value.Text = Slider.Disabled
			else
				Value.Text = TextValue:gsub("%[value%]", string.format("%.14g", value))
			end
			Val = value
			Library.Flags[Slider.Flag] = value
			task.spawn(Slider.Callback, value)
		end	
        --
		local function Slide(input)
			local sizeX = (input.Position.X - Outline.AbsolutePosition.X) / Outline.AbsoluteSize.X
			local value = ((Slider.Max - Slider.Min) * sizeX) + Slider.Min
			Set(value)
		end
        --
		Library:Connection(NewSlider.InputBegan, function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 then
				Sliding = true
				Slide(input)
			end
		end)
		Library:Connection(NewSlider.InputEnded, function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 then
				Sliding = false
			end
		end)
		Library:Connection(Accent.InputBegan, function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 then
				Sliding = true
				Slide(input)
			end
		end)
		Library:Connection(Accent.InputEnded, function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 then
				Sliding = false
			end
		end)
		Library:Connection(userinput.InputChanged, function(input)
			if input.UserInputType == Enum.UserInputType.MouseMovement then
				if Sliding then
					Slide(input)
				end
			end
		end)
		Library:Connection(NewSlider.MouseEnter, function()
			Title.TextColor3 = Library.Accent
		end)
        --
		Library:Connection(NewSlider.MouseLeave, function()
			Title.TextColor3 = Color3.new(0.5686, 0.5686, 0.5686)
		end)
        --
		Library:Connection(Subtract.MouseButton1Down, function()
			Set(Val - Slider.Decimals)
		end)
		Library:Connection(Value.FocusLost, function()
			if tonumber(Value.Text) then
				Set(Value.Text)
			else
				Set(Library.Flags[Slider.Flag])
			end
		end)
		--
		Library:Connection(Add.MouseButton1Down, function()
			Set(Val + Slider.Decimals)
		end)
        --
		function Slider:Set(Value)
			Set(Value)
		end
        --
		function Slider:SetVisible(Bool)
			NewSlider.Visible = Bool
		end 
        --
		Flags[Slider.Flag] = Set
		Library.Flags[Slider.Flag] = Slider.State
		Set(Slider.State)

        -- // Returning
		return Slider
	end
    --
	function Sections:Dropdown(Properties)
		local Properties = Properties or {};
		local Dropdown = {
			Window = self.Window,
			Page = self.Page,
			Section = self,
			Open = false,
			Name = Properties.Name or Properties.name or nil,
			Options = (Properties.options or Properties.Options or Properties.values or Properties.Values or {
				"1",
				"2",
				"3",
			}),
			Max = (Properties.Max or Properties.max or nil),
			State = (
                Properties.state
                    or Properties.State
                    or Properties.def
                    or Properties.Def
                    or Properties.default
                    or Properties.Default
                    or nil
            ),
			Callback = (
                Properties.callback
                    or Properties.Callback
                    or Properties.callBack
                    or Properties.CallBack
                    or function()
			end
            ),
			Flag = (
                Properties.flag
                    or Properties.Flag
                    or Properties.pointer
                    or Properties.Pointer
                    or Library.NextFlag()
            ),
			OptionInsts = {},
		}
        --
		local NewDrop = Library:Create('Frame', {
			Parent = Dropdown.Section.Elements.SectionContent,
			Size = UDim2.new(1.12, 0, 0, 30),
			BackgroundColor3 = Color3.new(1, 1, 1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0)
		})
		local Outline = Library:Create('TextButton', {
			Parent = NewDrop,
			Position = UDim2.new(0, 0, 1, 1),
			Size = UDim2.new(1, -30, 0, 17),
			BackgroundColor3 = "OutlineColor",
			BorderColor3 = Color3.new(0.0392, 0.0392, 0.0392),
			AnchorPoint = NewVector2(0, 1),
			Text = "",
			AutoButtonColor = false
		})
		local Inline = Library:Create('Frame', {
			Parent = Outline,
			Position = UDim2.new(0, 1, 0, 1),
			Size = UDim2.new(1, -2, 1, -2),
			BackgroundColor3 = "MainColor",
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0)
		})
		local Value = Library:Create('TextLabel', {
			Parent = Inline,
			Position = UDim2.new(0, 4, 0, 0),
			Size = UDim2.new(1, -30, 1, 0),
			BackgroundColor3 = Color3.new(1, 1, 1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0),
			TextColor3 = "FontColor",
			FontFace = Library.Font,
			Text = "",
			TextSize = Library.FontSize,
			TextXAlignment = Enum.TextXAlignment.Left,
			TextStrokeTransparency = 0,
			TextWrapped = true
		})
		local Icon = Library:Create('TextLabel', {
			Parent = Inline,
			Position = UDim2.new(0, -5, 0, 0),
			Size = UDim2.new(1, 0, 1, 0),
			BackgroundColor3 = Color3.new(1, 1, 1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0),
			Text = "+",
			TextColor3 = Color3.new(0.5686, 0.5686, 0.5686),
			FontFace = Library.Font,
			TextSize = Library.FontSize,
			TextXAlignment = Enum.TextXAlignment.Right,
			TextStrokeTransparency = 0
		})
		local Title = Library:Create('TextLabel', {
			Parent = NewDrop,
			Position = UDim2.new(0, 0, 0, 0),
			Size = UDim2.new(1, 0, 0, 10),
			BackgroundColor3 = Color3.new(1, 1, 1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0),
			TextColor3 = Color3.new(0.5686, 0.5686, 0.5686),
			FontFace = Library.Font,
			TextSize = Library.FontSize,
			TextXAlignment = Enum.TextXAlignment.Left,
			TextStrokeTransparency = 0,
			Text = Dropdown.Name
		})
		local ContainerOutline = Library:Create('Frame', {
			Parent = NewDrop,
			Position = UDim2.new(0, 0, 1, 2),
			Size = UDim2.new(1, -30, 0, 1),
			BackgroundColor3 = "OutlineColor",
			BorderColor3 = Color3.new(0.0392, 0.0392, 0.0392),
			Visible = false,
			ZIndex = 5
		})
		local ContainerInline = Library:Create('ScrollingFrame', {
			Parent = ContainerOutline,
			ScrollingDirection = Enum.ScrollingDirection.Y,
			ScrollBarThickness = 3,
			CanvasSize = UDim2.new(0, 0, 0, 0),
			ScrollBarImageColor3 = "Accent",
			AutomaticCanvasSize = Enum.AutomaticSize.Y,
			Position = UDim2.new(0, 1, 0, 1),
			Size = UDim2.new(1, -2, 1, -2),
			BackgroundColor3 = "MainColor",
			BorderSizePixel = 0,
			Rotation = 0.000001,
			BorderColor3 = Color3.new(0, 0, 0),
			ZIndex = 6;
		})
		local UIListLayout = Library:Create('UIListLayout', {
			Parent = ContainerInline,
			SortOrder = Enum.SortOrder.LayoutOrder,
		})
        
        -- // Connections
		Library:Connection(Outline.MouseButton1Down, function()
			ContainerOutline.Visible = not ContainerOutline.Visible
			if ContainerOutline.Visible then
				NewDrop.ZIndex = 2
				Icon.Text = "-"
			else
				NewDrop.ZIndex = 1
				Icon.Text = "+"
			end
		end)
		Library:Connection(userinput.InputBegan, function(Input)
			if ContainerOutline.Visible and Input.UserInputType == Enum.UserInputType.MouseButton1 then
				if not Library:IsMouseOverFrame(ContainerOutline) and not Library:IsMouseOverFrame(NewDrop) then
					ContainerOutline.Visible = false
					NewDrop.ZIndex = 1
					Icon.Text = "+"
				end
			end
		end)
		Library:Connection(NewDrop.MouseEnter, function()
			Outline.BorderColor3 = Library.Accent
			Title.TextColor3 = Library.Accent
		end)
        --
		Library:Connection(NewDrop.MouseLeave, function()
			Outline.BorderColor3 = Color3.new(0.0392, 0.0392, 0.0392)
			Title.TextColor3 = Color3.new(0.5686, 0.5686, 0.5686)
		end)
        --
		local chosen = Dropdown.Max and {} or nil
        --
		local function handleoptionclick(option, button, text)
			Library:Connection(button.MouseButton1Down, function()
				if Dropdown.Max then
					if table.find(chosen, option) then
						table.remove(chosen, table.find(chosen, option))
						local textchosen = {}
						local cutobject = false
						for _, opt in next, chosen do
							table.insert(textchosen, opt)
						end
						Value.Text = #chosen == 0 and "" or table.concat(textchosen, ",") .. (cutobject and ", ..." or "")
						text.TextColor3 = Color3.fromRGB(145, 145, 145)
						Library.Flags[Dropdown.Flag] = chosen
						task.spawn(Dropdown.Callback, chosen)
					else
						if #chosen == Dropdown.Max then
							Dropdown.OptionInsts[chosen[1]].text.TextColor3 = Color3.fromRGB(145, 145, 145)
							table.remove(chosen, 1)
						end
						table.insert(chosen, option)
						local textchosen = {}
						local cutobject = false
						for _, opt in next, chosen do
							table.insert(textchosen, opt)
						end
						Value.Text = #chosen == 0 and "" or table.concat(textchosen, ",") .. (cutobject and ", ..." or "")
						text.TextColor3 = Color3.fromRGB(255, 255, 255)
						Library.Flags[Dropdown.Flag] = chosen
						task.spawn(Dropdown.Callback, chosen)
					end
				else
					if chosen == option then
						chosen = nil
						Value.Text = ""
						text.TextColor3 = Color3.fromRGB(145, 145, 145)
					else
						for opt, tbl in next, Dropdown.OptionInsts do
							tbl.text.TextColor3 = Color3.fromRGB(145, 145, 145)
						end
						-- Select the new option
						chosen = option
						Value.Text = option
						text.TextColor3 = Color3.fromRGB(255, 255, 255)
					end
		
					Library.Flags[Dropdown.Flag] = chosen
					task.spawn(Dropdown.Callback, chosen)
				end
			end)
		end
        --
		local function createoptions(tbl)
		    local totalHeight = #tbl * 15 
		
		    for _, option in next, tbl do
		        Dropdown.OptionInsts[option] = {}
		        local NewOption = Library:Create('TextButton', {
		            Parent = ContainerInline,
		            Size = UDim2.new(1, 0, 0, 15),
		            BackgroundColor3 = Color3.new(1, 1, 1),
		            BackgroundTransparency = 1,
		            BorderSizePixel = 0,
		            BorderColor3 = Color3.new(0, 0, 0),
		            Text = "",
		            TextColor3 = Color3.new(0, 0, 0),
		            AutoButtonColor = false,
		            FontFace = Library.Font,
		            TextSize = 14,
		            ZIndex = 7,
		        })
		        local OptionName = Library:Create('TextLabel', {
		            Parent = NewOption,
		            Position = UDim2.new(0, 2, 0, 0),
		            Size = UDim2.new(1, 0, 1, 0),
		            BackgroundColor3 = Color3.new(1, 1, 1),
		            BackgroundTransparency = 1,
		            BorderSizePixel = 0,
		            BorderColor3 = Color3.new(0, 0, 0),
		            Text = option,
		            TextColor3 = Color3.new(0.5686, 0.5686, 0.5686),
		            FontFace = Library.Font,
		            TextSize = Library.FontSize,
		            TextXAlignment = Enum.TextXAlignment.Left,
		            TextStrokeTransparency = 0,
		            ZIndex = 8,
		        })
		
		        Dropdown.OptionInsts[option].button = NewOption
		        Dropdown.OptionInsts[option].text = OptionName
		        handleoptionclick(option, NewOption, OptionName)
		    end
		
		    local maxVisibleHeight = 155
		    local calculatedHeight = math.min(totalHeight, maxVisibleHeight)
		
		    ContainerInline.CanvasSize = UDim2.new(0, 0, 0, totalHeight)
		    ContainerOutline.Size = UDim2.new(1, -30, 0, calculatedHeight)
		end
		createoptions(Dropdown.Options)
        --
		local set
		set = function(option)
			if Dropdown.Max then
				table.clear(chosen)
				option = type(option) == "table" and option or {}
				for opt, tbl in next, Dropdown.OptionInsts do
					if not table.find(option, opt) then
						tbl.text.TextColor3 = Color3.fromRGB(145, 145, 145)
					end
				end
				for i, opt in next, option do
					if table.find(Dropdown.Options, opt) and #chosen < Dropdown.Max then
						table.insert(chosen, opt)
						Dropdown.OptionInsts[opt].text.TextColor3 = Color3.fromRGB(255, 255, 255)
					end
				end
				local textchosen = {}
				local cutobject = false
				for _, opt in next, chosen do
					table.insert(textchosen, opt)
				end
				Value.Text = #chosen == 0 and "" or table.concat(textchosen, ",") .. (cutobject and ", ..." or "")
				Library.Flags[Dropdown.Flag] = chosen
				task.spawn(Dropdown.Callback, chosen)
			end
		end
        --
		function Dropdown:Set(option)
			if Dropdown.Max then
				set(option)
			else
				for opt, tbl in next, Dropdown.OptionInsts do
					if opt ~= option then
						tbl.text.TextColor3 = Color3.fromRGB(145, 145, 145)
					end
				end
				if option then
					chosen = option
					if typeof(option) ~= "table" then
						Value.Text = option
					end
					if table.find(Dropdown.Options, option) then
						Dropdown.OptionInsts[option].text.TextColor3 = Color3.fromRGB(255, 255, 255)
					end
					Library.Flags[Dropdown.Flag] = chosen
					task.spawn(Dropdown.Callback, chosen)
				else
					chosen = nil
					Value.Text = ""
					Library.Flags[Dropdown.Flag] = chosen
					task.spawn(Dropdown.Callback, chosen)
				end
			end
		end
        --
		function Dropdown:Refresh(tbl)
			for _, opt in next, Dropdown.OptionInsts do
				coroutine.wrap(function()
					opt.button:Destroy()
				end)()
			end
			table.clear(Dropdown.OptionInsts)
			createoptions(tbl)
			if Dropdown.Max then
				table.clear(chosen)
			else
				chosen = nil
			end
			Library.Flags[Dropdown.Flag] = chosen
			task.spawn(Dropdown.Callback, chosen)
		end

        -- // Returning
		if Dropdown.Max then
			Flags[Dropdown.Flag] = set
		else
			Flags[Dropdown.Flag] = Dropdown
		end
		Dropdown:Set(Dropdown.State)
		function Dropdown:SetVisible(Bool)
			NewDrop.Visible = Bool
		end
		return Dropdown
	end
    --
	function Sections:Keybind(Properties)
		local Properties = Properties or {}
		local Keybind = {
			Section = self,
			Name = Properties.name or Properties.Name or "Keybind",
			State = (
                Properties.state
                    or Properties.State
                    or Properties.def
                    or Properties.Def
                    or Properties.default
                    or Properties.Default
                    or nil
            ),
			Mode = (Properties.mode or Properties.Mode or "Toggle"),
			UseKey = (Properties.UseKey or false),
			Ignore = (Properties.ignore or Properties.Ignore or false),
			Callback = (
                Properties.callback
                    or Properties.Callback
                    or Properties.callBack
                    or Properties.CallBack
                    or function()
			end
            ),
			Flag = (
                Properties.flag
                    or Properties.Flag
                    or Properties.pointer
                    or Properties.Pointer
                    or Library.NextFlag()
            ),
			Binding = nil,
		}
		local Key
		local State = false
        --
		local NewKey = Library:Create('Frame', {
			Parent = Keybind.Section.Elements.SectionContent,
			Size = UDim2.new(1, 0, 0, 12),
			BackgroundColor3 = Color3.new(1, 1, 1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0)
		})
		local Outline = Library:Create('TextButton', {
			Parent = NewKey,
			Position = UDim2.new(1, 0, 0.5, 0),
			Size = UDim2.new(0, 40, 0, 12),
			BackgroundColor3 = "OutlineColor",
			BorderColor3 = Color3.new(0.0392, 0.0392, 0.0392),
			AnchorPoint = NewVector2(1, 0.5),
			Text = "",
			AutoButtonColor = false
		})
		local Inline = Library:Create('Frame', {
			Parent = Outline,
			Position = UDim2.new(0, 1, 0, 1),
			Size = UDim2.new(1, -2, 1, -2),
			BackgroundColor3 = "MainColor",
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0)
		})
		local Value = Library:Create('TextLabel', {
			Parent = Inline,
			Size = UDim2.new(1, 0, 1, 0),
			BackgroundColor3 = Color3.new(1, 1, 1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0),
			Text = "",
			TextColor3 = "FontColor",
			FontFace = Library.Font,
			TextSize = Library.FontSize,
			TextStrokeTransparency = 0
		})
		local Title = Library:Create('TextLabel', {
			Parent = NewKey,
			Position = UDim2.new(0, 15, 0, 0),
			Size = UDim2.new(1, 0, 0, 10),
			BackgroundColor3 = Color3.new(1, 1, 1),
			BackgroundTransparency = 1,	
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0),
			TextColor3 = Color3.new(0.5686, 0.5686, 0.5686),
			FontFace = Library.Font,
			TextSize = Library.FontSize,
			TextXAlignment = Enum.TextXAlignment.Left,
			Text = Keybind.Name,
			TextStrokeTransparency = 0
		})
		local ModeOutline = Library:Create('Frame', {
			Parent = NewKey,
			Position = UDim2.new(1, 65, 0.5, 0),
			Size = UDim2.new(0, 60, 0, 12),
			BackgroundColor3 = "OutlineColor",
			BorderColor3 = Color3.new(0.0392, 0.0392, 0.0392),
			AnchorPoint = NewVector2(1, 0.5),
			AutomaticSize = Enum.AutomaticSize.Y,
			Rotation = 0.00001,
			Visible = false,
			ZIndex = 1020000010
		})
		local ModeInline = Library:Create('Frame', {
			Parent = ModeOutline,
			Position = UDim2.new(0, 1, 0, 1),
			Size = UDim2.new(1, -2, 1, -2),
			BackgroundColor3 = "MainColor",
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0),
			ZIndex = 1020000010
		})
		local UIListLayout = Library:Create('UIListLayout', {
			Parent = ModeInline,
			SortOrder = Enum.SortOrder.LayoutOrder
		})
		local Hold = Library:Create('TextButton', {
			Parent = ModeInline,
			Size = UDim2.new(1, 0, 0, 15),
			BackgroundColor3 = Color3.new(1, 1, 1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0),
			Text = "Hold",
			TextColor3 = Keybind.Mode == "Hold" and Color3.new(1, 1, 1) or Color3.new(0.5686, 0.5686, 0.5686),
			AutoButtonColor = false,
			FontFace = Library.Font,
			TextSize = Library.FontSize,
			TextStrokeTransparency = 0,
			ZIndex = 1020000010
		})
		local Toggle = Library:Create('TextButton', {
			Parent = ModeInline,
			Size = UDim2.new(1, 0, 0, 15),
			BackgroundColor3 = Color3.new(1, 1, 1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0),
			Text = "Toggle",
			TextColor3 = Keybind.Mode == "Toggle" and Color3.new(1, 1, 1) or Color3.new(0.5686, 0.5686, 0.5686),
			AutoButtonColor = false,
			FontFace = Library.Font,
			TextSize = Library.FontSize,
			TextStrokeTransparency = 0,
			ZIndex = 1020000010
		})
		local Always = Library:Create('TextButton', {
			Parent = ModeInline,
			Size = UDim2.new(1, 0, 0, 15),
			BackgroundColor3 = Color3.new(1, 1, 1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0),
			Text = "Always",
			TextColor3 = Keybind.Mode == "Always" and Color3.new(1, 1, 1) or Color3.new(0.5686, 0.5686, 0.5686),
			AutoButtonColor = false,
			FontFace = Library.Font,
			TextSize = Library.FontSize,
			TextStrokeTransparency = 0,
			ZIndex = 1020000010
		})
		local ListValue = Library.KeyList:NewKey(tostring(Keybind.State):gsub("Enum.KeyCode.", ""), Keybind.Name, Keybind.Mode)
		local c
        -- // Functions
		local function set(newkey)
			local modetable = {"Toggle","Always","Hold"}
			if string.find(tostring(newkey), "Enum") then
				if c then
					c:Disconnect()
					if Keybind.Flag then
						Library.Flags[Keybind.Flag] = false
					end
					task.spawn(Keybind.Callback, false)
				end
				if tostring(newkey):find("Enum.KeyCode.") then
					newkey = Enum.KeyCode[tostring(newkey):gsub("Enum.KeyCode.", "")]
				elseif tostring(newkey):find("Enum.UserInputType.") then
					newkey = Enum.UserInputType[tostring(newkey):gsub("Enum.UserInputType.", "")]
				end
				if newkey == Enum.KeyCode.Backspace or newkey == Enum.KeyCode.Escape then
					Key = nil
					if Keybind.UseKey then
						if Keybind.Flag then
							Library.Flags[Keybind.Flag] = Key
						end
						task.spawn(Keybind.Callback, Key)
					end
					local text = ""
					Value.Text = text
					ListValue:Update(text, Keybind.Name, Keybind.Mode)
					ListValue:SetVisible(false)
				elseif newkey ~= nil then
					Key = newkey
					if Keybind.UseKey then
						if Keybind.Flag then
							Library.Flags[Keybind.Flag] = Key
						end
						task.spawn(Keybind.Callback, Key)
					end
					local text = (Library.Keys[newkey] or tostring(newkey):gsub("Enum.KeyCode.", ""))
					Value.Text = text
					ListValue:Update(text, Keybind.Name, Keybind.Mode)
					if Keybind.Name == "UI Toggle" then
						ListValue:SetColorBlue(true)
					end
				end
				Library.Flags[Keybind.Flag .. "_KEY"] = newkey
			elseif table.find(modetable, newkey) then
				if not Keybind.UseKey then
					Library.Flags[Keybind.Flag .. "_KEY STATE"] = newkey
					Keybind.Mode = newkey
					if Keybind.Mode == "Toggle" then
						Library:AddToThemeObjects(Toggle, {TextColor3 = "FontColor"})
						Library:RemoveFromThemeObjects(Hold)
						Library:RemoveFromThemeObjects(Always)
						Toggle.TextColor3 = Library.FontColor
						Hold.TextColor3 = Color3.fromRGB(145, 145, 145)
						Always.TextColor3 = Color3.fromRGB(145, 145, 145)
					elseif Keybind.Mode == "Hold" then
						Library:AddToThemeObjects(Hold, {TextColor3 = "FontColor"})
						Library:RemoveFromThemeObjects(Toggle)
						Library:RemoveFromThemeObjects(Always)
						Hold.TextColor3 = Library.FontColor
						Toggle.TextColor3 = Color3.fromRGB(145, 145, 145)
						Always.TextColor3 = Color3.fromRGB(145, 145, 145)
					elseif Keybind.Mode == "Always" then
						State = true
						ListValue:SetColorBlue()
						if Keybind.Flag then
							Library.Flags[Keybind.Flag] = State
						end
						task.spawn(Keybind.Callback, true)
						Library:AddToThemeObjects(Always, {TextColor3 = "FontColor"})
						Library:RemoveFromThemeObjects(Toggle)
						Library:RemoveFromThemeObjects(Hold)
						Always.TextColor3 = Library.FontColor
						Toggle.TextColor3 = Color3.fromRGB(145, 145, 145)
						Hold.TextColor3 = Color3.fromRGB(145, 145, 145)
					end
					if Key ~= nil then
						ListValue:Update((Library.Keys[Key] or tostring(Key):gsub("Enum.KeyCode.", "")), Keybind.Name, Keybind.Mode)
					end
				end
			else
				State = newkey
				if Keybind.Flag then
					Library.Flags[Keybind.Flag] = newkey
				end
				task.spawn(Keybind.Callback, newkey)
			end
		end
        --
		set(Keybind.State)
		set(Keybind.Mode)
		Library:Connection(Outline.MouseButton1Click, function()
			if not Keybind.Binding then
				Value.Text = "..."
				Keybind.Binding = Library:Connection(userinput.InputBegan, function(input, gpe)
					set(input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode or input.UserInputType)
					Library:Disconnect(Keybind.Binding)
					task.wait()
					Keybind.Binding = nil
				end
                )
			end
		end)
        --

		Library:Connection(userinput.InputBegan, function(inp)
			if not userinput:GetFocusedTextBox() then
				if (inp.KeyCode == Key or inp.UserInputType == Key) and not Keybind.Binding and not Keybind.UseKey then
					if Keybind.Mode == "Hold" then
						ListValue:SetColorBlue(true)
						if Keybind.Flag then
							Library.Flags[Keybind.Flag] = true
						end
						c = Library:Connection(runserv.RenderStepped, function()
							if Keybind.Callback then
								task.spawn(Keybind.Callback, true)
							end
						end)
					elseif Keybind.Mode == "Toggle" then
						State = not State
						if Keybind.Flag then
							Library.Flags[Keybind.Flag] = State
						end
						Keybind.Callback(State)
						ListValue:SetColorBlue()
					end
				end
			end
		end)
        --
		Library:Connection(userinput.InputEnded, function(inp)
			if not userinput:GetFocusedTextBox() then
				if Keybind.Mode == "Hold" and not Keybind.UseKey then
					if Key ~= "" or Key ~= nil then
						if inp.KeyCode == Key or inp.UserInputType == Key then
							if c then
								ListValue:SetColorBlue(false)
								c:Disconnect()
								if Keybind.Flag then
									Library.Flags[Keybind.Flag] = false
								end
								if Keybind.Callback then
									task.spawn(Keybind.Callback, false)
								end
							end
						end
					end
				end
			end
		end)
		Library:Connection(Outline.MouseEnter, function()
			Outline.BorderColor3 = Library.Accent
		end)
        --
		Library:Connection(Outline.MouseLeave, function()
			Outline.BorderColor3 = Color3.new(0.0392, 0.0392, 0.0392)
		end)
        --
		Library:Connection(Outline.MouseButton2Down, function()
			ModeOutline.Visible = not ModeOutline.Visible
		end)
        --
		Library:Connection(NewKey.MouseEnter, function()
			Title.TextColor3 = Library.Accent
		end)
        --
		Library:Connection(NewKey.MouseLeave, function()
			Title.TextColor3 = Color3.new(0.5686, 0.5686, 0.5686)
		end)
        --
		Library:Connection(Hold.MouseButton1Down, function()
			set("Hold")

		end)
        --
		Library:Connection(Toggle.MouseButton1Down, function()
			set("Toggle")
		end)
        --
		Library:Connection(Always.MouseButton1Down, function()
			set("Always")
		end)
        --
		Library:Connection(userinput.InputBegan, function(Input)
			if ModeOutline.Visible and Input.UserInputType == Enum.UserInputType.MouseButton1 then
				if not Library:IsMouseOverFrame(ModeOutline) then
					ModeOutline.Visible = false
				end
			end
		end)
        --
		Library.Flags[Keybind.Flag .. "_KEY"] = Keybind.State
		Library.Flags[Keybind.Flag .. "_KEY STATE"] = Keybind.Mode
		Flags[Keybind.Flag] = set
		Flags[Keybind.Flag .. "_KEY"] = set
		Flags[Keybind.Flag .. "_KEY STATE"] = set
        --
		function Keybind:Set(key)
			set(key)
		end
        -- // Returning
		return Keybind
	end
    --
	function Sections:Colorpicker(Properties)
		local Properties = Properties or {}
		local Colorpicker = {
			Window = self.Window,
			Page = self.Page,
			Section = self,
			Name = (Properties.Name or "Colorpicker"),
			State = (
                Properties.state
                    or Properties.State
                    or Properties.def
                    or Properties.Def
                    or Properties.default
                    or Properties.Default
                    or Color3.fromRGB(255, 0, 0)
            ),
			Callback = (
                Properties.callback
                    or Properties.Callback
                    or Properties.callBack
                    or Properties.CallBack
                    or function()
			end
            ),
			Flag = (
                Properties.flag
                    or Properties.Flag
                    or Properties.pointer
                    or Properties.Pointer
                    or Library.NextFlag()
            ),
			Colorpickers = 0,
		}
        --
		local NewToggle = Library:Create('Frame', {
			Parent = Colorpicker.Section.Elements.SectionContent,
			Size = UDim2.new(1, 0, 0, 10),
			BackgroundColor3 = Color3.new(1, 1, 1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0)
		})
		local TextLabel = Library:Create('TextLabel', {
			Parent = NewToggle,
			Position = UDim2.new(0, 15, 0, 0),
			Size = UDim2.new(0, 100, 1, 0),
			BackgroundColor3 = Color3.new(1, 1, 1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0),
			Text = Colorpicker.Name,
			TextColor3 = Color3.fromRGB(145, 145, 145),
			FontFace = Library.Font,
			TextSize = Library.FontSize,
			TextXAlignment = Enum.TextXAlignment.Left,
			TextStrokeTransparency = 0
		})
        --
		Library:Connection(NewToggle.MouseEnter, function()
			TextLabel.TextColor3 = Library.Accent
		end)
        --
		Library:Connection(NewToggle.MouseLeave, function()
			TextLabel.TextColor3 = Color3.new(0.5686, 0.5686, 0.5686)
		end)

        -- // Functions
		Colorpicker.Colorpickers = Colorpicker.Colorpickers + 1
		local colorpickertypes = Library:NewPicker(
            Colorpicker.State,
            NewToggle,
            Colorpicker.Colorpickers - 1,
            Colorpicker.Flag,
            Colorpicker.Callback
        )
		function Colorpicker:Set(color)
			colorpickertypes:set(color)
		end

        -- // Returning
		return Colorpicker
	end
    --
	function Sections:Textbox(Properties)
		local Properties = Properties or {}
		local Textbox = {
			Window = self.Window,
			Page = self.Page,
			Section = self,
			Name = (Properties.Name or Properties.name or "textbox"),
			Placeholder = (
                Properties.placeholder
                or Properties.Placeholder
                or Properties.holder
                or Properties.Holder
                or ""
            ),
			State = (
                Properties.state
                or Properties.State
                or Properties.def
                or Properties.Def
                or Properties.default
                or Properties.Default
                or ""
            ),
			Callback = (
                Properties.callback
                or Properties.Callback
                or Properties.callBack
                or Properties.CallBack
                or function()
			end
            ),
			Flag = (
                Properties.flag
                or Properties.Flag
                or Properties.pointer
                or Properties.Pointer
                or Library.NextFlag()
            ),
		}
        --
		local NewDrop = Library:Create('Frame', {
			Parent = Textbox.Section.Elements.SectionContent,
			Size = UDim2.new(1.12, 0, 0, 30),
			BackgroundColor3 = Color3.new(1, 1, 1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0)
		})
		local Outline = Library:Create('TextButton', {
			Parent = NewDrop,
			Position = UDim2.new(0, 0, 1, 1),
			Size = UDim2.new(1, -30, 0, 17),
			BackgroundColor3 = "OutlineColor",
			BorderColor3 = Color3.new(0.0392, 0.0392, 0.0392),
			AnchorPoint = NewVector2(0, 1),
			Text = "",
			AutoButtonColor = false
		})
		local Inline = Library:Create('Frame', {
			Parent = Outline,
			Position = UDim2.new(0, 1, 0, 1),
			Size = UDim2.new(1, -2, 1, -2),
			BackgroundColor3 = "MainColor",
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0)
		})
		local Value = Library:Create('TextBox', {
			Parent = Inline,
			Position = UDim2.new(0, 4, 0, 0),
			Size = UDim2.new(1, 0, 1, 0),
			BackgroundColor3 = Color3.new(1, 1, 1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0),
			TextColor3 = "FontColor",
			FontFace = Library.Font,
			TextSize = Library.FontSize,
			TextXAlignment = Enum.TextXAlignment.Left,
			TextStrokeTransparency = 0,
			TextWrapped = true,
			Text = Textbox.State,
			ClearTextOnFocus = false
		})
		local Title = Library:Create('TextLabel', {
			Parent = NewDrop,
			Position = UDim2.new(0, 0, 0, 0),
			Size = UDim2.new(1, 0, 0, 10),
			BackgroundColor3 = Color3.new(1, 1, 1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0),
			TextColor3 = Color3.new(0.5686, 0.5686, 0.5686),
			FontFace = Library.Font,
			TextSize = Library.FontSize,
			TextXAlignment = Enum.TextXAlignment.Left,
			TextStrokeTransparency = 0,
			Text = Textbox.Name
		})
    
        -- // Connections
		Library:Connection(NewDrop.MouseEnter, function()
			Outline.BorderColor3 = Library.Accent
			Title.TextColor3 = Library.Accent
		end)
        --
		Library:Connection(NewDrop.MouseLeave, function()
			Outline.BorderColor3 = Color3.new(0.0392, 0.0392, 0.0392)
			Title.TextColor3 = Color3.new(0.5686, 0.5686, 0.5686)
		end)
		Library:Connection(Value.FocusLost, function()
			task.spawn(Textbox.Callback, Value.Text)
			Library.Flags[Textbox.Flag] = Value.Text
		end)
        --
		function Textbox:set(str)
			Value.Text = str
			Library.Flags[Textbox.Flag] = str
			task.spawn(Textbox.Callback, str)
		end
    
        -- // Return
		Flags[Textbox.Flag] = function(value)
			Textbox:set(value)
		end
		return Textbox
	end    
    --
	function Sections:Button(Properties)
		local Properties = Properties or {}
		local Button = {
			Window = self.Window,
			Page = self.Page,
			Section = self,
			Name = Properties.Name or "button",
			Callback = (
                Properties.callback
                    or Properties.Callback
                    or Properties.callBack
                    or Properties.CallBack
                    or function()
			end
            ),
		}
        --
		local NewButton = Library:Create('TextButton', {
			Parent = Button.Section.Elements.SectionContent,
			Size = UDim2.new(1.12, 0, 0, 14),
			BackgroundColor3 = Color3.new(1, 1, 1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0),
			Text = "",
			TextColor3 = Color3.new(0, 0, 0),
			AutoButtonColor = false,
			FontFace = Library.Font,
			TextSize = 14
		})
		local Outline = Library:Create('Frame', {
			Parent = NewButton,
			Position = UDim2.new(0, 0, 1, 1),
			Size = UDim2.new(1, -30, 0, 17),
			BackgroundColor3 = "OutlineColor",
			BorderColor3 = Color3.new(0.0392, 0.0392, 0.0392),
			AnchorPoint = NewVector2(0, 1)
		})
		local Inline = Library:Create('Frame', {
			Parent = Outline,
			Position = UDim2.new(0, 1, 0, 1),
			Size = UDim2.new(1, -2, 1, -2),
			BackgroundColor3 = "MainColor",
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0)
		})
		local Value = Library:Create('TextLabel', {
			Parent = Inline,
			Position = UDim2.new(0, 4, 0, 0),
			Size = UDim2.new(1, 0, 1, 0),
			BackgroundColor3 = Color3.new(1, 1, 1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0),
			TextColor3 = Color3.new(0.5686, 0.5686, 0.5686),
			FontFace = Library.Font,
			TextSize = Library.FontSize,
			Text = Button.Name,
			TextStrokeTransparency = 0
		})
		Library:Connection(NewButton.MouseEnter, function()
			Outline.BorderColor3 = Library.Accent
			Value.TextColor3 = Library.Accent
		end)
        --
		Library:Connection(NewButton.MouseLeave, function()
			Outline.BorderColor3 = Color3.new(0.0392, 0.0392, 0.0392)
			Value.TextColor3 = Color3.new(0.5686, 0.5686, 0.5686)
		end)
        --
		Library:Connection(NewButton.MouseButton1Down, function()
			task.spawn(Button.Callback)
			Outline.BorderColor3 = Color3.new(0.0392, 0.0392, 0.0392)
			Value.TextColor3 = Color3.new(0.5686, 0.5686, 0.5686)
		end)
        --
		Library:Connection(NewButton.MouseButton1Up, function()
			Value.TextColor3 = Color3.new(0.5686, 0.5686, 0.5686)
		end)
	end
    --
	function Sections:Label(Properties)
		local Properties = Properties or {}
		local Label = {
			Window = self.Window,
			Page = self.Page,
			Section = self,
			Name = Properties.Name or "label",
			Centered = Properties.Centered or false,
		}
		local NewButton = Library:Create('TextLabel', {
			Parent = Label.Section.Elements.SectionContent,
			Size = UDim2.new(1, 0, 0, 12),
			BackgroundColor3 = Color3.new(1, 1, 1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			BorderColor3 = Color3.new(0, 0, 0),
			Text = Label.Name,
			TextColor3 = "FontColor",
			FontFace = Library.Font,
			TextSize = Library.FontSize,
			TextXAlignment = Label.Centered and Enum.TextXAlignment.Center or Enum.TextXAlignment.Left,
			TextStrokeTransparency = 0,
			TextStrokeColor3 = Color3.new(0, 0, 0)
		})
        --
		function Label:SetText(NewText)
			self.Name = NewText
			NewButton.Text = NewText
		end
		return Label
	end
	return Library
end
